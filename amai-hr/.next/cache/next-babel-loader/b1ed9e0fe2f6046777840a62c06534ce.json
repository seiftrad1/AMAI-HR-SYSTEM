{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _templateObject,\n    _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\Profile\\\\[id].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nexport default function PrivatePage(props) {\n  _s();\n\n  var _useState = useState(null),\n      image = _useState[0],\n      setImage = _useState[1];\n\n  var _useState2 = useState(null),\n      createObjectURL = _useState2[0],\n      setCreateObjectURL = _useState2[1];\n\n  var router = useRouter();\n  var id = router.query.id;\n\n  var uploadToClient = function uploadToClient(event) {\n    if (event.target.files && event.target.files[0]) {\n      var i = event.target.files[0];\n      setImage(i);\n      setCreateObjectURL(URL.createObjectURL(i));\n    }\n  };\n\n  var uploadToServer = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var hasura, body, response, tt, Avatar, UploadImage;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              hasura = hasuraUserClient();\n              body = new FormData();\n              body.append(\"file\", image);\n              _context.next = 5;\n              return fetch(\"/api/file/\", {\n                method: \"POST\",\n                body: body\n              });\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return fetch(\"/api/file/\", {\n                method: \"POST\",\n                body: JSON.stringify({\n                  id: id\n                }),\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                }\n              });\n\n            case 8:\n              tt = _context.sent;\n              Avatar = image;\n              UploadImage = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      mutation MyMutation($Avatar: String!, $id: Int!) {\\n        update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\\n          Avatar\\n          Name\\n        }\\n      }\\n    \"])));\n              _context.prev = 11;\n              _context.next = 14;\n              return hasura.request(UploadImage, {\n                id: id,\n                Avatar: Avatar\n              });\n\n            case 14:\n              mutate();\n              _context.next = 20;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](11);\n              console.error(_context.t0);\n\n            case 20:\n              return _context.abrupt(\"return\");\n\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[11, 17]]);\n    }));\n\n    return function uploadToServer(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: createObjectURL,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Select Image\"), id, __jsx(\"input\", {\n    type: \"file\",\n    name: \"myImage\",\n    onChange: uploadToClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    onClick: uploadToServer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Send to server\")));\n}\n\n_s(PrivatePage, \"QIhs4IFTqdm8UmUFmd/wqR/wYB4=\", false, function () {\n  return [useRouter];\n});\n\n_c = PrivatePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivatePage\");","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/Profile/[id].js"],"names":["useState","useRouter","PrivatePage","props","image","setImage","createObjectURL","setCreateObjectURL","router","id","query","uploadToClient","event","target","files","i","URL","uploadToServer","hasura","hasuraUserClient","body","FormData","append","fetch","method","response","JSON","stringify","headers","tt","Avatar","UploadImage","gql","request","mutate","console","error","minHeight"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACzC,kBAA0BH,QAAQ,CAAC,IAAD,CAAlC;AAAA,MAAOI,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA8CL,QAAQ,CAAC,IAAD,CAAtD;AAAA,MAAOM,eAAP;AAAA,MAAwBC,kBAAxB;;AACA,MAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,MAAQQ,EAAR,GAAeD,MAAM,CAACE,KAAtB,CAAQD,EAAR;;AACA,MAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAW;AAChC,QAAIA,KAAK,CAACC,MAAN,CAAaC,KAAb,IAAsBF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAA1B,EAAiD;AAC/C,UAAMC,CAAC,GAAGH,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAV;AACAT,MAAAA,QAAQ,CAACU,CAAD,CAAR;AACAR,MAAAA,kBAAkB,CAACS,GAAG,CAACV,eAAJ,CAAoBS,CAApB,CAAD,CAAlB;AACD;AACF,GAND;;AAQA,MAAME,cAAc;AAAA,wEAAG,iBAAOL,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfM,cAAAA,MADe,GACNC,gBAAgB,EADV;AAEfC,cAAAA,IAFe,GAER,IAAIC,QAAJ,EAFQ;AAGrBD,cAAAA,IAAI,CAACE,MAAL,CAAY,MAAZ,EAAoBlB,KAApB;AAHqB;AAAA,qBAIEmB,KAAK,CAAC,YAAD,EAAe;AACzCC,gBAAAA,MAAM,EAAE,MADiC;AAEzCJ,gBAAAA,IAAI,EAAJA;AAFyC,eAAf,CAJP;;AAAA;AAIfK,cAAAA,QAJe;AAAA;AAAA,qBAQJF,KAAK,CAAC,YAAD,EAAe;AACnCC,gBAAAA,MAAM,EAAE,MAD2B;AAEnCJ,gBAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAe;AAAElB,kBAAAA,EAAE,EAAFA;AAAF,iBAAf,CAF6B;AAGnCmB,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT;AAH0B,eAAf,CARD;;AAAA;AAQfC,cAAAA,EARe;AAefC,cAAAA,MAfe,GAeN1B,KAfM;AAgBf2B,cAAAA,WAhBe,GAgBDC,GAhBC;AAAA;AAAA;AAAA,qBAyBbd,MAAM,CAACe,OAAP,CAAeF,WAAf,EAA4B;AAAEtB,gBAAAA,EAAE,EAAFA,EAAF;AAAMqB,gBAAAA,MAAM,EAANA;AAAN,eAA5B,CAzBa;;AAAA;AA0BnBI,cAAAA,MAAM;AA1Ba;AAAA;;AAAA;AAAA;AAAA;AA4BnBC,cAAAA,OAAO,CAACC,KAAR;;AA5BmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdnB,cAAc;AAAA;AAAA;AAAA,KAApB;;AAiCA,SACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAE;AAAEoB,MAAAA,SAAS,EAAE;AAAb,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAE/B,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGGG,EAHH,EAIE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,QAAQ,EAAEE,cAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AACE,IAAA,SAAS,EAAC,iBADZ;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,OAAO,EAAEM,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF,CADF,CADF;AAiBD;;GA/DuBf,W;UAGPD,S;;;KAHOC,W","sourcesContent":["import { useState } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nexport default function PrivatePage(props) {\r\n  const [image, setImage] = useState(null);\r\n  const [createObjectURL, setCreateObjectURL] = useState(null);\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const uploadToClient = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      const i = event.target.files[0];\r\n      setImage(i);\r\n      setCreateObjectURL(URL.createObjectURL(i));\r\n    }\r\n  };\r\n\r\n  const uploadToServer = async (event) => {\r\n    const hasura = hasuraUserClient();\r\n    const body = new FormData();\r\n    body.append(\"file\", image);\r\n    const response = await fetch(\"/api/file/\", {\r\n      method: \"POST\",\r\n      body,\r\n    });\r\n    const tt = await fetch(\"/api/file/\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ id }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const Avatar = image;\r\n    const UploadImage = gql`\r\n      mutation MyMutation($Avatar: String!, $id: Int!) {\r\n        update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\r\n          Avatar\r\n          Name\r\n        }\r\n      }\r\n    `;\r\n    try {\r\n      await hasura.request(UploadImage, { id, Avatar });\r\n      mutate();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        <img src={createObjectURL} />\r\n        <h4>Select Image</h4>\r\n        {id}\r\n        <input type=\"file\" name=\"myImage\" onChange={uploadToClient} />\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          type=\"submit\"\r\n          onClick={uploadToServer}\r\n        >\r\n          Send to server\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}