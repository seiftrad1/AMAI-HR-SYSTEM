{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\Project\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useForm } from \"react-hook-form\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nimport { gql, hasuraAdminClient } from \"../../lib/hasura-admin-client\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nconst from = new Date().toISOString();\nconst GetUsers = gql`\n  {\n    User {\n      Name\n      id\n      notifications_aggregate(where: { seen: { _eq: false } }) {\n        aggregate {\n          count\n        }\n      }\n      notifications(where: { seen: { _eq: false } }) {\n        id\n        description\n      }\n    }\n  }\n`;\nconst GetTodos = gql`\n  {\n    Todo {\n      Description\n      Name\n      Date\n      User {\n        Name\n        id\n      }\n    }\n  }\n`;\nconst GetUserById = gql`\n  query GetUserById($user_id: Int!) {\n    User_by_pk(id: $user_id) {\n      id\n      notifications_aggregate(where: { seen: { _eq: false } }) {\n        aggregate {\n          count\n        }\n      }\n      notifications(where: { seen: { _eq: false } }) {\n        id\n        description\n      }\n    }\n  }\n`;\nconst AddNotification = gql`\n  mutation MyMutation($user_id: Int!) {\n    insert_notification_one(\n      object: {\n        user_id: $user_id\n        name: \"ttt\"\n        seen: false\n        description: \"tttttt\"\n      }\n    ) {\n      user_id\n      seen\n      name\n      id\n      description\n    }\n  }\n`;\nconst InsertTask = gql`\n  mutation InsertTask(\n    $Description: String!\n    $Name: String!\n    $from: timestamptz!\n    $user_id: Int!\n  ) {\n    insert_Todo_one(\n      object: {\n        Description: $Description\n        Name: $Name\n        Date: $from\n        user_id: $user_id\n      }\n    ) {\n      Description\n      Date\n      Name\n      user_id\n    }\n  }\n`;\nexport const getStaticProps = async () => {\n  const {\n    User\n  } = await hasuraAdminClient.request(GetUsers);\n  return {\n    props: {\n      User\n    }\n  };\n};\nexport default function Todos({\n  User\n}) {\n  const router = useRouter();\n  const {\n    isAuthenticated,\n    user\n  } = useAuthState();\n  const hasura = hasuraUserClient();\n  const {\n    handleSubmit,\n    register,\n    control,\n    errors,\n    formState: {\n      isSubmitting\n    }\n  } = useForm();\n  const {\n    updateUser\n  } = useAuthDispatch();\n  useEffect(() => {\n    if (!isAuthenticated) router.push(\"/\");\n  }, [isAuthenticated]);\n  if (!isAuthenticated) return null;\n\n  const onSubmit = async ({\n    Description,\n    Name,\n    user_id\n  }) => {\n    console.log(from);\n\n    try {\n      const {\n        insert_Todo_one\n      } = await hasura.request(InsertTask, {\n        Description,\n        from,\n        Name,\n        user_id\n      });\n      const {\n        insert_notification_one\n      } = await hasura.request(AddNotification, {\n        user_id\n      });\n\n      if (isAuthenticated) {\n        const {\n          User_by_pk\n        } = await hasura.request(GetUserById, {\n          user_id: user.id\n        });\n        updateUser(User_by_pk);\n      }\n\n      router.push(`/CandidatList`);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, \"s\"), \" \"));\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/Project/index.js"],"names":["useEffect","useRouter","useForm","useAuthState","useAuthDispatch","gql","hasuraAdminClient","hasuraUserClient","from","Date","toISOString","GetUsers","GetTodos","GetUserById","AddNotification","InsertTask","getStaticProps","User","request","props","Todos","router","isAuthenticated","user","hasura","handleSubmit","register","control","errors","formState","isSubmitting","updateUser","push","onSubmit","Description","Name","user_id","console","log","insert_Todo_one","insert_notification_one","User_by_pk","id","err","minHeight"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\r\nimport { gql, hasuraAdminClient } from \"../../lib/hasura-admin-client\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\n\r\nconst from = new Date().toISOString();\r\n\r\nconst GetUsers = gql`\r\n  {\r\n    User {\r\n      Name\r\n      id\r\n      notifications_aggregate(where: { seen: { _eq: false } }) {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n      notifications(where: { seen: { _eq: false } }) {\r\n        id\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetTodos = gql`\r\n  {\r\n    Todo {\r\n      Description\r\n      Name\r\n      Date\r\n      User {\r\n        Name\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetUserById = gql`\r\n  query GetUserById($user_id: Int!) {\r\n    User_by_pk(id: $user_id) {\r\n      id\r\n      notifications_aggregate(where: { seen: { _eq: false } }) {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n      notifications(where: { seen: { _eq: false } }) {\r\n        id\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst AddNotification = gql`\r\n  mutation MyMutation($user_id: Int!) {\r\n    insert_notification_one(\r\n      object: {\r\n        user_id: $user_id\r\n        name: \"ttt\"\r\n        seen: false\r\n        description: \"tttttt\"\r\n      }\r\n    ) {\r\n      user_id\r\n      seen\r\n      name\r\n      id\r\n      description\r\n    }\r\n  }\r\n`;\r\nconst InsertTask = gql`\r\n  mutation InsertTask(\r\n    $Description: String!\r\n    $Name: String!\r\n    $from: timestamptz!\r\n    $user_id: Int!\r\n  ) {\r\n    insert_Todo_one(\r\n      object: {\r\n        Description: $Description\r\n        Name: $Name\r\n        Date: $from\r\n        user_id: $user_id\r\n      }\r\n    ) {\r\n      Description\r\n      Date\r\n      Name\r\n      user_id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getStaticProps = async () => {\r\n  const { User } = await hasuraAdminClient.request(GetUsers);\r\n\r\n  return {\r\n    props: {\r\n      User,\r\n    },\r\n  };\r\n};\r\n\r\nexport default function Todos({ User }) {\r\n  const router = useRouter();\r\n  const { isAuthenticated, user } = useAuthState();\r\n  const hasura = hasuraUserClient();\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    errors,\r\n    formState: { isSubmitting },\r\n  } = useForm();\r\n  const { updateUser } = useAuthDispatch();\r\n  useEffect(() => {\r\n    if (!isAuthenticated) router.push(\"/\");\r\n  }, [isAuthenticated]);\r\n\r\n  if (!isAuthenticated) return null;\r\n\r\n  const onSubmit = async ({ Description, Name, user_id }) => {\r\n    console.log(from);\r\n    try {\r\n      const { insert_Todo_one } = await hasura.request(InsertTask, {\r\n        Description,\r\n        from,\r\n        Name,\r\n        user_id,\r\n      });\r\n      const { insert_notification_one } = await hasura.request(\r\n        AddNotification,\r\n        {\r\n          user_id,\r\n        }\r\n      );\r\n      if (isAuthenticated) {\r\n        const { User_by_pk } = await hasura.request(GetUserById, {\r\n          user_id: user.id,\r\n        });\r\n        updateUser(User_by_pk);\r\n      }\r\n      router.push(`/CandidatList`);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content-wrapper\">\r\n        <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n          s\r\n        </div>{\" \"}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}