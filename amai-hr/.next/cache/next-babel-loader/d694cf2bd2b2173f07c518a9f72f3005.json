{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _templateObject4,\n    _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\Project\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useForm } from \"react-hook-form\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nimport { gql } from \"../../lib/hasura-admin-client\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nvar from = new Date().toISOString();\nvar GetTodos = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  {\\n    Todo {\\n      Description\\n      Name\\n      Date\\n      User {\\n        Name\\n        id\\n      }\\n    }\\n  }\\n\"])));\nvar GetUserById = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  query GetUserById($user_id: Int!) {\\n    User_by_pk(id: $user_id) {\\n      id\\n      notifications_aggregate(where: { seen: { _eq: false } }) {\\n        aggregate {\\n          count\\n        }\\n      }\\n      notifications(where: { seen: { _eq: false } }) {\\n        id\\n        description\\n      }\\n    }\\n  }\\n\"])));\nvar AddNotification = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  mutation MyMutation($user_id: Int!) {\\n    insert_notification_one(\\n      object: {\\n        user_id: $user_id\\n        name: \\\"ttt\\\"\\n        seen: false\\n        description: \\\"tttttt\\\"\\n      }\\n    ) {\\n      user_id\\n      seen\\n      name\\n      id\\n      description\\n    }\\n  }\\n\"])));\nvar InsertTask = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  mutation InsertTask(\\n    $Description: String!\\n    $Name: String!\\n    $from: timestamptz!\\n    $user_id: Int!\\n  ) {\\n    insert_Todo_one(\\n      object: {\\n        Description: $Description\\n        Name: $Name\\n        Date: $from\\n        user_id: $user_id\\n      }\\n    ) {\\n      Description\\n      Date\\n      Name\\n      user_id\\n    }\\n  }\\n\"])));\nexport var __N_SSG = true;\nexport default function Todos(_ref) {\n  _s();\n\n  var User = _ref.User;\n  var router = useRouter();\n\n  var _useAuthState = useAuthState(),\n      isAuthenticated = _useAuthState.isAuthenticated,\n      user = _useAuthState.user;\n\n  var hasura = hasuraUserClient();\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      control = _useForm.control,\n      errors = _useForm.errors,\n      isSubmitting = _useForm.formState.isSubmitting;\n\n  var _useAuthDispatch = useAuthDispatch(),\n      updateUser = _useAuthDispatch.updateUser;\n\n  useEffect(function () {\n    if (!isAuthenticated) router.push(\"/\");\n  }, [isAuthenticated]);\n  if (!isAuthenticated) return null;\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var Description, Name, user_id, _yield$hasura$request, insert_Todo_one, _yield$hasura$request2, insert_notification_one, _yield$hasura$request3, User_by_pk;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              Description = _ref2.Description, Name = _ref2.Name, user_id = _ref2.user_id;\n              console.log(from);\n              _context.prev = 2;\n              _context.next = 5;\n              return hasura.request(InsertTask, {\n                Description: Description,\n                from: from,\n                Name: Name,\n                user_id: user_id\n              });\n\n            case 5:\n              _yield$hasura$request = _context.sent;\n              insert_Todo_one = _yield$hasura$request.insert_Todo_one;\n              _context.next = 9;\n              return hasura.request(AddNotification, {\n                user_id: user_id\n              });\n\n            case 9:\n              _yield$hasura$request2 = _context.sent;\n              insert_notification_one = _yield$hasura$request2.insert_notification_one;\n\n              if (!isAuthenticated) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 14;\n              return hasura.request(GetUserById, {\n                user_id: user.id\n              });\n\n            case 14:\n              _yield$hasura$request3 = _context.sent;\n              User_by_pk = _yield$hasura$request3.User_by_pk;\n              updateUser(User_by_pk);\n\n            case 17:\n              router.push(\"/CandidatList\");\n              _context.next = 23;\n              break;\n\n            case 20:\n              _context.prev = 20;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 20]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }), \" \"));\n}\n\n_s(Todos, \"mwJvlQNRzmLPK+eOCHcnNZK9vqc=\", false, function () {\n  return [useRouter, useAuthState, useForm, useAuthDispatch];\n});\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/Project/index.js"],"names":["useEffect","useRouter","useForm","useAuthState","useAuthDispatch","gql","hasuraUserClient","from","Date","toISOString","GetTodos","GetUserById","AddNotification","InsertTask","Todos","User","router","isAuthenticated","user","hasura","handleSubmit","register","control","errors","isSubmitting","formState","updateUser","push","onSubmit","Description","Name","user_id","console","log","request","insert_Todo_one","insert_notification_one","id","User_by_pk","minHeight"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\r\nimport { gql, hasuraAdminClient } from \"../../lib/hasura-admin-client\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\n\r\nconst from = new Date().toISOString();\r\n\r\nconst GetUsers = gql`\r\n  {\r\n    User {\r\n      Name\r\n      id\r\n      notifications_aggregate(where: { seen: { _eq: false } }) {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n      notifications(where: { seen: { _eq: false } }) {\r\n        id\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetTodos = gql`\r\n  {\r\n    Todo {\r\n      Description\r\n      Name\r\n      Date\r\n      User {\r\n        Name\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst GetUserById = gql`\r\n  query GetUserById($user_id: Int!) {\r\n    User_by_pk(id: $user_id) {\r\n      id\r\n      notifications_aggregate(where: { seen: { _eq: false } }) {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n      notifications(where: { seen: { _eq: false } }) {\r\n        id\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst AddNotification = gql`\r\n  mutation MyMutation($user_id: Int!) {\r\n    insert_notification_one(\r\n      object: {\r\n        user_id: $user_id\r\n        name: \"ttt\"\r\n        seen: false\r\n        description: \"tttttt\"\r\n      }\r\n    ) {\r\n      user_id\r\n      seen\r\n      name\r\n      id\r\n      description\r\n    }\r\n  }\r\n`;\r\nconst InsertTask = gql`\r\n  mutation InsertTask(\r\n    $Description: String!\r\n    $Name: String!\r\n    $from: timestamptz!\r\n    $user_id: Int!\r\n  ) {\r\n    insert_Todo_one(\r\n      object: {\r\n        Description: $Description\r\n        Name: $Name\r\n        Date: $from\r\n        user_id: $user_id\r\n      }\r\n    ) {\r\n      Description\r\n      Date\r\n      Name\r\n      user_id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getStaticProps = async () => {\r\n  const { User } = await hasuraAdminClient.request(GetUsers);\r\n\r\n  return {\r\n    props: {\r\n      User,\r\n    },\r\n  };\r\n};\r\n\r\nexport default function Todos({ User }) {\r\n  const router = useRouter();\r\n  const { isAuthenticated, user } = useAuthState();\r\n  const hasura = hasuraUserClient();\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    errors,\r\n    formState: { isSubmitting },\r\n  } = useForm();\r\n  const { updateUser } = useAuthDispatch();\r\n  useEffect(() => {\r\n    if (!isAuthenticated) router.push(\"/\");\r\n  }, [isAuthenticated]);\r\n\r\n  if (!isAuthenticated) return null;\r\n\r\n  const onSubmit = async ({ Description, Name, user_id }) => {\r\n    console.log(from);\r\n    try {\r\n      const { insert_Todo_one } = await hasura.request(InsertTask, {\r\n        Description,\r\n        from,\r\n        Name,\r\n        user_id,\r\n      });\r\n      const { insert_notification_one } = await hasura.request(\r\n        AddNotification,\r\n        {\r\n          user_id,\r\n        }\r\n      );\r\n      if (isAuthenticated) {\r\n        const { User_by_pk } = await hasura.request(GetUserById, {\r\n          user_id: user.id,\r\n        });\r\n        updateUser(User_by_pk);\r\n      }\r\n      router.push(`/CandidatList`);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"page-content-wrapper\">\r\n        <div className=\"page-content\" style={{ minHeight: 1500 }}></div>{\" \"}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}