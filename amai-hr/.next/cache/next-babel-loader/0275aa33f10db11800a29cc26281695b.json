{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject;\n\nimport React from \"react\";\nimport Link from \"next/link\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nimport Image from \"react-bootstrap/Image\";\nimport useSWR, { mutate } from \"swr\";\nimport gql from \"graphql-tag\";\nimport { useRouter } from \"next/router\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nvar Notification_count = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query MyQuery {\\n    notification_aggregate {\\n      aggregate {\\n        count(columns: id)\\n      }\\n    }\\n  }\\n\"])));\nexport default function Notification(_ref) {\n  var children = _ref.children;\n\n  var updateLastSeen = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var hasura, initialData, c;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              hasura = hasuraUserClient();\n              _context.next = 3;\n              return hasura.request(Notification_count);\n\n            case 3:\n              initialData = _context.sent;\n              c = initialData.notification_aggregate.aggregate.count;\n              return _context.abrupt(\"return\", {\n                props: {\n                  initialData: initialData,\n                  c: c\n                },\n                revalidate: 1\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateLastSeen() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return c;\n}\n_c = Notification;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notification\");","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/Components/Notification.js"],"names":["React","Link","useAuthState","useAuthDispatch","Image","useSWR","mutate","gql","useRouter","hasuraUserClient","Notification_count","Notification","children","updateLastSeen","hasura","request","initialData","c","notification_aggregate","aggregate","count","props","revalidate"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,oBAA9C;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,MAAP,IAAiBC,MAAjB,QAA+B,KAA/B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA,IAAMC,kBAAkB,GAAGH,GAAH,4LAAxB;AAUA,eAAe,SAASI,YAAT,OAAoC;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AACjD,MAAMC,cAAc;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,MADe,GACNL,gBAAgB,EADV;AAAA;AAAA,qBAGKK,MAAM,CAACC,OAAP,CAAeL,kBAAf,CAHL;;AAAA;AAGfM,cAAAA,WAHe;AAIfC,cAAAA,CAJe,GAIXD,WAAW,CAACE,sBAAZ,CAAmCC,SAAnC,CAA6CC,KAJlC;AAAA,+CAMd;AACLC,gBAAAA,KAAK,EAAE;AACLL,kBAAAA,WAAW,EAAXA,WADK;AAELC,kBAAAA,CAAC,EAADA;AAFK,iBADF;AAKLK,gBAAAA,UAAU,EAAE;AALP,eANc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdT,cAAc;AAAA;AAAA;AAAA,KAApB;;AAeA,SAAOI,CAAP;AACD;KAjBuBN,Y","sourcesContent":["import React from \"react\";\r\nimport Link from \"next/link\";\r\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\r\nimport Image from \"react-bootstrap/Image\";\r\nimport useSWR, { mutate } from \"swr\";\r\nimport gql from \"graphql-tag\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\n\r\nconst Notification_count = gql`\r\n  query MyQuery {\r\n    notification_aggregate {\r\n      aggregate {\r\n        count(columns: id)\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Notification({ children }) {\r\n  const updateLastSeen = async () => {\r\n    const hasura = hasuraUserClient();\r\n\r\n    const initialData = await hasura.request(Notification_count);\r\n    const c = initialData.notification_aggregate.aggregate.count;\r\n\r\n    return {\r\n      props: {\r\n        initialData,\r\n        c,\r\n      },\r\n      revalidate: 1,\r\n    };\r\n  };\r\n\r\n  return c;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}