{"ast":null,"code":"import useSWR, { mutate } from \"swr\";\nimport { useRouter } from \"next/router\";\nimport formidable from \"formidable\";\nimport fs from \"fs\";\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst GetUsers = gql`\n  query MyQuery {\n    User {\n      id\n      Name\n      email\n    }\n  }\n`;\nconst GetCandidats = gql`\n  query MyQuery($id: Int!) {\n    Todo(where: { user_id: { _eq: $id } }) {\n      Name\n      user_id\n    }\n  }\n`;\n\nconst post = async (req, res) => {\n  const form = new formidable.IncomingForm();\n  form.parse(req, async function (err, fields, files) {\n    await saveFile(files.file);\n    return res.status(201).send(\"\");\n  });\n};\n\nexport const getStaticPaths = async () => {\n  const hasura = hasuraUserClient();\n  const {\n    User\n  } = await hasura.request(GetUsers);\n  return {\n    paths: User.map(({\n      id\n    }) => ({\n      params: {\n        id: id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n  console.log(params);\n  return {\n    props: {\n      id\n    },\n    revalidate: 1\n  };\n};\n\nconst saveFile = async file => {\n  const hasura = hasuraUserClient();\n  const id = getStaticProps.id;\n  console.log(id);\n  const data = fs.readFileSync(file.path);\n  fs.writeFileSync(`./public/${file.name}`, data);\n  await fs.unlinkSync(file.path);\n  const Avatar = file.name;\n  const UploadImage = gql`\n    mutation MyMutation($Avatar: String!, $id: Int!) {\n      update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\n        Avatar\n        Name\n      }\n    }\n  `;\n\n  try {\n    await hasura.request(UploadImage, {\n      id,\n      Avatar\n    });\n    mutate();\n  } catch (error) {\n    console.error(error);\n  }\n\n  return;\n};\n\nexport default ((req, res) => {\n  req.method === \"POST\" ? post(req, res) : req.method === \"PUT\" ? console.log(\"PUT\") : req.method === \"DELETE\" ? console.log(\"DELETE\") : req.method === \"GET\" ? console.log(\"GET\") : res.status(404).send(\"\");\n});","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/api/file.js"],"names":["useSWR","mutate","useRouter","formidable","fs","hasuraAdminClient","gql","hasuraUserClient","config","api","bodyParser","GetUsers","GetCandidats","post","req","res","form","IncomingForm","parse","err","fields","files","saveFile","file","status","send","getStaticPaths","hasura","User","request","paths","map","id","params","toString","fallback","getStaticProps","console","log","props","revalidate","data","readFileSync","path","writeFileSync","name","unlinkSync","Avatar","UploadImage","error","method"],"mappings":"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","sourcesContent":["import useSWR, { mutate } from \"swr\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nimport formidable from \"formidable\";\r\nimport fs from \"fs\";\r\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nconst GetUsers = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n      Name\r\n      email\r\n    }\r\n  }\r\n`;\r\nconst GetCandidats = gql`\r\n  query MyQuery($id: Int!) {\r\n    Todo(where: { user_id: { _eq: $id } }) {\r\n      Name\r\n      user_id\r\n    }\r\n  }\r\n`;\r\nconst post = async (req, res) => {\r\n  const form = new formidable.IncomingForm();\r\n  form.parse(req, async function (err, fields, files) {\r\n    await saveFile(files.file);\r\n    return res.status(201).send(\"\");\r\n  });\r\n};\r\nexport const getStaticPaths = async () => {\r\n  const hasura = hasuraUserClient();\r\n\r\n  const { User } = await hasura.request(GetUsers);\r\n\r\n  return {\r\n    paths: User.map(({ id }) => ({\r\n      params: {\r\n        id: id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n};\r\nexport const getStaticProps = async ({ params }) => {\r\n  const { id } = params;\r\n\r\n  console.log(params);\r\n\r\n  return {\r\n    props: {\r\n      id,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\nconst saveFile = async (file) => {\r\n  const hasura = hasuraUserClient();\r\n  const id = getStaticProps.id;\r\n  console.log(id);\r\n  const data = fs.readFileSync(file.path);\r\n  fs.writeFileSync(`./public/${file.name}`, data);\r\n  await fs.unlinkSync(file.path);\r\n  const Avatar = file.name;\r\n\r\n  const UploadImage = gql`\r\n    mutation MyMutation($Avatar: String!, $id: Int!) {\r\n      update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\r\n        Avatar\r\n        Name\r\n      }\r\n    }\r\n  `;\r\n  try {\r\n    await hasura.request(UploadImage, { id, Avatar });\r\n    mutate();\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n  return;\r\n};\r\n\r\nexport default (req, res) => {\r\n  req.method === \"POST\"\r\n    ? post(req, res)\r\n    : req.method === \"PUT\"\r\n    ? console.log(\"PUT\")\r\n    : req.method === \"DELETE\"\r\n    ? console.log(\"DELETE\")\r\n    : req.method === \"GET\"\r\n    ? console.log(\"GET\")\r\n    : res.status(404).send(\"\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}