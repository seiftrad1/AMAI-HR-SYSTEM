{"ast":null,"code":"import useSWR, { mutate } from \"swr\";\nimport { useRouter } from \"next/router\";\nimport formidable from \"formidable\";\nimport fs from \"fs\";\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst GetUsers = gql`\n  query MyQuery {\n    User {\n      id\n      Name\n      email\n    }\n  }\n`;\nexport default (async (req, res) => {\n  const form = new formidable.IncomingForm();\n  form.parse(req, async function (err, fields, files) {\n    await saveFile(files.file);\n    return res.status(201).send(\"\");\n  });\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n\n  const saveFile = async file => {\n    const hasura = hasuraUserClient();\n    const data = fs.readFileSync(file.path);\n    fs.writeFileSync(`./public/${file.name}`, data);\n    await fs.unlinkSync(file.path);\n    const Avatar = file.name;\n    const UploadImage = gql`\n      mutation MyMutation($Avatar: String!, $id: Int!) {\n        update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\n          Avatar\n          Name\n        }\n      }\n    `;\n\n    try {\n      await hasura.request(UploadImage, {\n        id,\n        Avatar\n      });\n      mutate();\n    } catch (error) {\n      console.error(error);\n    }\n\n    return;\n  };\n});","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/api/file.js"],"names":["useSWR","mutate","useRouter","formidable","fs","hasuraAdminClient","gql","hasuraUserClient","config","api","bodyParser","GetUsers","req","res","form","IncomingForm","parse","err","fields","files","saveFile","file","status","send","router","id","query","hasura","data","readFileSync","path","writeFileSync","name","unlinkSync","Avatar","UploadImage","request","error","console"],"mappings":"AAAA,OAAOA,MAAP,IAAiBC,MAAjB,QAA+B,KAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,iBAAT,EAA4BC,GAA5B,QAAuC,+BAAvC;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA,OAAO,MAAMC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe,CAAf;AAMP,MAAMC,QAAQ,GAAGL,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,gBAAe,OAAOM,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAMC,IAAI,GAAG,IAAIX,UAAU,CAACY,YAAf,EAAb;AACAD,EAAAA,IAAI,CAACE,KAAL,CAAWJ,GAAX,EAAgB,gBAAgBK,GAAhB,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAClD,UAAMC,QAAQ,CAACD,KAAK,CAACE,IAAP,CAAd;AACA,WAAOR,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,CAAP;AACD,GAHD;AAIA,QAAMC,MAAM,GAAGtB,SAAS,EAAxB;AACA,QAAM;AAAEuB,IAAAA;AAAF,MAASD,MAAM,CAACE,KAAtB;;AACA,QAAMN,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC/B,UAAMM,MAAM,GAAGpB,gBAAgB,EAA/B;AACA,UAAMqB,IAAI,GAAGxB,EAAE,CAACyB,YAAH,CAAgBR,IAAI,CAACS,IAArB,CAAb;AACA1B,IAAAA,EAAE,CAAC2B,aAAH,CAAkB,YAAWV,IAAI,CAACW,IAAK,EAAvC,EAA0CJ,IAA1C;AACA,UAAMxB,EAAE,CAAC6B,UAAH,CAAcZ,IAAI,CAACS,IAAnB,CAAN;AACA,UAAMI,MAAM,GAAGb,IAAI,CAACW,IAApB;AAEA,UAAMG,WAAW,GAAG7B,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,KAPI;;AAQA,QAAI;AACF,YAAMqB,MAAM,CAACS,OAAP,CAAeD,WAAf,EAA4B;AAAEV,QAAAA,EAAF;AAAMS,QAAAA;AAAN,OAA5B,CAAN;AACAjC,MAAAA,MAAM;AACP,KAHD,CAGE,OAAOoC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;;AACD;AACD,GAtBD;AAuBD,CA/BD","sourcesContent":["import useSWR, { mutate } from \"swr\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nimport formidable from \"formidable\";\r\nimport fs from \"fs\";\r\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nconst GetUsers = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n      Name\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nexport default async (req, res) => {\r\n  const form = new formidable.IncomingForm();\r\n  form.parse(req, async function (err, fields, files) {\r\n    await saveFile(files.file);\r\n    return res.status(201).send(\"\");\r\n  });\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const saveFile = async (file) => {\r\n    const hasura = hasuraUserClient();\r\n    const data = fs.readFileSync(file.path);\r\n    fs.writeFileSync(`./public/${file.name}`, data);\r\n    await fs.unlinkSync(file.path);\r\n    const Avatar = file.name;\r\n\r\n    const UploadImage = gql`\r\n      mutation MyMutation($Avatar: String!, $id: Int!) {\r\n        update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\r\n          Avatar\r\n          Name\r\n        }\r\n      }\r\n    `;\r\n    try {\r\n      await hasura.request(UploadImage, { id, Avatar });\r\n      mutate();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return;\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}