{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport Layout from \"./Components/Layout\";\nimport { useAuthState } from \"../context/auth\";\nimport { gql, hasuraAdminClient } from \"../lib/hasura-admin-client\";\nimport { hasuraUserClient } from \"../lib/hasura-user-client\";\nconst GetUsers = gql`\n  {\n    User {\n      Name\n      id\n    }\n  }\n`;\nconst InsertTask = gql`\n  mutation InsertTask(\n    $Email: String!\n    $Last_Name: String!\n    $Name: String!\n    $domain: String!\n    $phone_number: String!\n  ) {\n    insert_Candidate_one(\n      object: {\n        Email: $Email\n        Last_Name: $Last_Name\n        Name: $Name\n        domain: $domain\n        phone_number: $phone_number\n      }\n    ) {\n      Email\n      Last_Name\n      Name\n      domain\n      id\n      phone_number\n    }\n  }\n`;\n\nconst handleUpdate = async ({\n  id,\n  message\n}) => {\n  const {\n    update_posts_by_pk\n  } = await hasura.request(UpdatePost, {\n    id,\n    message\n  });\n  mutate(_objectSpread(_objectSpread({}, data), {}, {\n    threads_by_pk: _objectSpread(_objectSpread({}, data.threads_by_pk), {}, {\n      posts: data.threads_by_pk.posts.reduce((posts, post) => {\n        if (post.id === id) return [...posts, _objectSpread(_objectSpread({}, post), update_posts_by_pk)];\n        return [...posts, post];\n      }, [])\n    })\n  }));\n};\n\nexport const getStaticProps = async () => {\n  const {\n    User\n  } = await hasuraAdminClient.request(GetUsers);\n  return {\n    props: {\n      User\n    }\n  };\n};\nexport default function Candidat() {\n  const router = useRouter();\n  const {\n    isAuthenticated,\n    user\n  } = useAuthState();\n  const hasura = hasuraUserClient();\n  const {\n    handleSubmit,\n    register,\n    control,\n    errors,\n    formState: {\n      isSubmitting\n    }\n  } = useForm();\n  useEffect(() => {\n    if (!isAuthenticated) router.push(\"/\");\n  }, [isAuthenticated]);\n  if (!isAuthenticated) return null;\n\n  const onSubmit = async ({\n    Email,\n    Last_Name,\n    Name,\n    domain,\n    phone_number\n  }) => {\n    console.log(phone_number);\n\n    try {\n      const {\n        insert_Candidate_one\n      } = await hasura.request(InsertTask, {\n        Email,\n        Last_Name,\n        Name,\n        domain,\n        phone_number\n      });\n      router.push(`/CandidatList`);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Layout, null, __jsx(\"div\", {\n    className: \"page-content-wrapper\"\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    }\n  }, __jsx(\"div\", {\n    class: \"profile-content\"\n  }, __jsx(\"div\", {\n    class: \"row\"\n  }, __jsx(\"div\", {\n    class: \"col-md-12\"\n  }, __jsx(\"div\", {\n    class: \"portlet light \"\n  }, __jsx(\"div\", {\n    class: \"portlet-body\"\n  }, __jsx(\"div\", {\n    class: \"tab-content\"\n  }, __jsx(\"div\", {\n    class: \"tab-pane active\",\n    id: \"tab_1_1\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"First Name\"), __jsx(\"input\", {\n    name: \"Name\",\n    id: \"Name\",\n    type: \"text\",\n    placeholder: \"First Name\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Last Name\"), __jsx(\"input\", {\n    name: \"Last_Name\",\n    id: \"Last_Name\",\n    type: \"text\",\n    placeholder: \"Last Name\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Mobile Number\"), __jsx(\"input\", {\n    name: \"phone_number\",\n    id: \"phone_number\",\n    type: \"text\",\n    placeholder: \"+1 646 580 DEMO (6284)\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Email\"), __jsx(\"input\", {\n    name: \"Email\",\n    id: \"Email\",\n    type: \"email\",\n    placeholder: \"Design, Web etc.\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Domain\"), __jsx(\"input\", {\n    name: \"domain\",\n    id: \"domain\",\n    type: \"text\",\n    placeholder: \"Web Developer\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"margiv-top-10\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    class: \"btn green\",\n    disabled: isSubmitting\n  }, \" \", \"Save Changes\", \" \"), __jsx(\"a\", {\n    href: \"#\",\n    class: \"btn default\"\n  }, \" \", \"Cancel\", \" \"))))))))))), \" \")));\n}","map":null,"metadata":{},"sourceType":"module"}