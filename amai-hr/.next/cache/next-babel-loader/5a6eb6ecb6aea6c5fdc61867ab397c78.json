{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useForm } from \"react-hook-form\";\nimport { useAuthState, useAuthDispatch } from \"../context/auth\";\nexport default function RegisterPage() {\n  var router = useRouter();\n\n  var _useAuthState = useAuthState(),\n      isAuthenticated = _useAuthState.isAuthenticated;\n\n  var _useAuthDispatch = useAuthDispatch(),\n      createUser = _useAuthDispatch.register;\n\n  var _useForm = useForm({\n    defaultValues: {\n      save_last_seen: true\n    }\n  }),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      errors = _useForm.errors,\n      isSubmitting = _useForm.formState.isSubmitting,\n      setError = _useForm.setError;\n\n  useEffect(function () {\n    if (isAuthenticated) {\n      router.push(\"/\");\n    }\n  }, [isAuthenticated]);\n  if (isAuthenticated) return null;\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var name, email, password, save_last_seen, message;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              name = _ref.name, email = _ref.email, password = _ref.password, save_last_seen = _ref.save_last_seen;\n              _context.prev = 1;\n              _context.next = 4;\n              return createUser({\n                name: name,\n                email: email,\n                password: password,\n                save_last_seen: save_last_seen\n              });\n\n            case 4:\n              router.push(\"/\");\n              _context.next = 11;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              message = _context.t0.message;\n              setError(\"email\", {\n                type: \"manual\",\n                message: message\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 7]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"body\", {\n    className: \"login\"\n  }, __jsx(\"form\", {\n    \"class\": \"register-form\",\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    \"class\": \"content\"\n  }, \" \", __jsx(\"h3\", {\n    \"class\": \"font-green\"\n  }, \"Add User\"), \" \", __jsx(\"div\", {\n    \"class\": \"form-group\"\n  }, __jsx(\"input\", {\n    \"class\": \"form-control form-control-solid placeholder-no-fix\",\n    name: \"name\",\n    id: \"name\",\n    ref: register({\n      required: \"You must provide a name.\"\n    }),\n    placeholder: \"Your name\"\n  })), errors.name && __jsx(\"span\", null, errors.name.message), __jsx(\"div\", {\n    \"class\": \"form-group\"\n  }, \" \", __jsx(\"input\", {\n    \"class\": \"form-control form-control-solid placeholder-no-fix\",\n    type: \"email\",\n    name: \"email\",\n    id: \"email\",\n    ref: register({\n      required: \"You must provide a email.\",\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"You must provide a valid email\"\n      }\n    }),\n    placeholder: \"Your email\"\n  }), errors.email && __jsx(\"span\", null, errors.email.message)), __jsx(\"div\", {\n    \"class\": \"form-group\"\n  }, \" \", __jsx(\"input\", {\n    \"class\": \"form-control form-control-solid placeholder-no-fix\",\n    type: \"password\",\n    name: \"password\",\n    id: \"password\",\n    ref: register({\n      required: \"You must provide a password.\",\n      minLength: {\n        message: \"Your password must be at least 6 characters\",\n        value: 6\n      }\n    }),\n    placeholder: \"Choose a password\"\n  }), errors.password && __jsx(\"span\", null, errors.password.message)), __jsx(\"div\", {\n    \"class\": \"form-group\"\n  }, \" \", __jsx(\"label\", {\n    htmlFor: \"save_last_seen\",\n    \"class\": \"rememberme check mt-checkbox mt-checkbox-outline\"\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    id: \"save_last_seen\",\n    name: \"save_last_seen\",\n    ref: register\n  }), \"Show as online to other users\", __jsx(\"span\", null))), __jsx(\"div\", {\n    \"class\": \"create-account\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    \"class\": \"btn green uppercase\"\n  }, \"Create account\")), \" \")));\n}","map":null,"metadata":{},"sourceType":"module"}