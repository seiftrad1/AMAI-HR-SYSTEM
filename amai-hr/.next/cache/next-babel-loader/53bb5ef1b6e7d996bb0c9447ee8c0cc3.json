{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fetch from \"isomorphic-unfetch\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\nvar accessToken = null;\n\nvar requestAccessToken = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!accessToken) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return fetch(\"\".concat(process.env.APP_HOST, \"/api/session\"));\n\n          case 4:\n            res = _context.sent;\n\n            if (!res.ok) {\n              _context.next = 12;\n              break;\n            }\n\n            _context.next = 8;\n            return res.json();\n\n          case 8:\n            json = _context.sent;\n            accessToken = json.accessToken;\n            _context.next = 13;\n            break;\n\n          case 12:\n            accessToken = \"public\";\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function requestAccessToken() {\n    return _ref.apply(this, arguments);\n  };\n}(); // remove cached token on 401 from the server\n\n\nvar resetTokenLink = onError(function (_ref2) {\n  var networkError = _ref2.networkError;\n\n  if (networkError && networkError.name === \"ServerError\" && networkError.statusCode === 401) {\n    accessToken = null;\n  }\n});\n\nvar createHttpLink = function createHttpLink(headers) {\n  var httpLink = new HttpLink({\n    uri: \"https://immortal-monkfish-39.hasura.app/v1/graphql\",\n    credentials: \"include\",\n    headers: headers,\n    // auth token is fetched on the server side\n    fetch: fetch\n  });\n  return httpLink;\n};\n\nvar createWSLink = function createWSLink() {\n  return new WebSocketLink(new SubscriptionClient(\"wss://immortal-monkfish-39.hasura.app/v1/graphql\", {\n    lazy: true,\n    reconnect: true,\n    connectionParams: function () {\n      var _connectionParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return requestAccessToken();\n\n              case 2:\n                return _context2.abrupt(\"return\", {\n                  headers: {\n                    authorization: accessToken ? \"Bearer \".concat(accessToken) : \"\"\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function connectionParams() {\n        return _connectionParams.apply(this, arguments);\n      }\n\n      return connectionParams;\n    }()\n  }));\n};\n\nexport default function createApolloClient(initialState, headers) {\n  var ssrMode = false;\n  var link;\n\n  if (ssrMode) {\n    link = createHttpLink(headers);\n  } else {\n    link = createWSLink();\n  }\n\n  return new ApolloClient({\n    ssrMode: ssrMode,\n    link: link,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/lib/apolloClient.js"],"names":["fetch","ApolloClient","InMemoryCache","HttpLink","onError","WebSocketLink","SubscriptionClient","accessToken","requestAccessToken","process","env","APP_HOST","res","ok","json","resetTokenLink","networkError","name","statusCode","createHttpLink","headers","httpLink","uri","credentials","createWSLink","lazy","reconnect","connectionParams","authorization","createApolloClient","initialState","ssrMode","link","cache","restore"],"mappings":"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","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\n\nlet accessToken = null;\n\nconst requestAccessToken = async () => {\n  if (accessToken) return;\n\n  const res = await fetch(`${process.env.APP_HOST}/api/session`);\n  if (res.ok) {\n    const json = await res.json();\n    accessToken = json.accessToken;\n  } else {\n    accessToken = \"public\";\n  }\n};\n\n// remove cached token on 401 from the server\nconst resetTokenLink = onError(({ networkError }) => {\n  if (\n    networkError &&\n    networkError.name === \"ServerError\" &&\n    networkError.statusCode === 401\n  ) {\n    accessToken = null;\n  }\n});\n\nconst createHttpLink = (headers) => {\n  const httpLink = new HttpLink({\n    uri: \"https://immortal-monkfish-39.hasura.app/v1/graphql\",\n    credentials: \"include\",\n    headers, // auth token is fetched on the server side\n    fetch,\n  });\n  return httpLink;\n};\n\nconst createWSLink = () => {\n  return new WebSocketLink(\n    new SubscriptionClient(\"wss://immortal-monkfish-39.hasura.app/v1/graphql\", {\n      lazy: true,\n      reconnect: true,\n      connectionParams: async () => {\n        await requestAccessToken(); // happens on the client\n        return {\n          headers: {\n            authorization: accessToken ? `Bearer ${accessToken}` : \"\",\n          },\n        };\n      },\n    })\n  );\n};\n\nexport default function createApolloClient(initialState, headers) {\n  const ssrMode = typeof window === \"undefined\";\n  let link;\n  if (ssrMode) {\n    link = createHttpLink(headers);\n  } else {\n    link = createWSLink();\n  }\n  return new ApolloClient({\n    ssrMode,\n    link,\n    cache: new InMemoryCache().restore(initialState),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}