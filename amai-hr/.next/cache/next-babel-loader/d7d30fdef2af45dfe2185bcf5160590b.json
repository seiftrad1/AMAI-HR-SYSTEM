{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\AssignTask\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport { useForm } from \"react-hook-form\";\nimport Link from \"next/link\";\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\nimport { Form } from \"react-bootstrap\";\nimport { format, parseISO } from \"date-fns\";\nconst from = new Date().toISOString();\nconst getProjectsIds = gql`\n  {\n    Project {\n      id\n      Title\n      Description\n    }\n  }\n`;\nconst GetUsers = gql`\n  query MyQuery {\n    User {\n      id\n      Name\n      Domain\n      Avatar\n    }\n  }\n`;\nconst insertmultiple = gql`\n  mutation MyMutation(\n    $Description: String!\n    $Project_id: Int!\n    $name: String!\n    $from: timestamptz!\n  ) {\n    insert_Task(\n      objects: {\n        Date: $from\n        Description: $Description\n        completed: false\n        Project_id: $Project_id\n        name: $name\n      }\n    ) {\n      affected_rows\n    }\n  }\n`;\nconst GetUsersbyproject = gql`\n  query MyQuery($id: Int!) {\n    User(\n      where: {\n        _not: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\n      }\n    ) {\n      Name\n      Avatar\n      Last_Name\n      email\n    }\n  }\n`;\nconst getTasks = gql`\n  query MyQuery($id: Int!) {\n    Task(where: { Project_id: { _eq: $id } }) {\n      id\n      Description\n      Date\n      completed\n      name\n      User {\n        Avatar\n        email\n      }\n    }\n  }\n`;\nconst GetUsersWorkingOnthisProject = gql`\n  query MyQuery($id: Int!) {\n    User(\n      where: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\n    ) {\n      id\n      Name\n      Domain\n      Avatar\n    }\n  }\n`;\nconst GetProjectByID = gql`\n  query GetProjectByID($id: Int!) {\n    Project_by_pk(id: $id) {\n      id\n      Title\n      Description\n      company_name\n      income\n    }\n  }\n`;\nconst assignu = gql`\n  mutation MyMutation($project_id: Int!, $user_id: Int!) {\n    insert_user_project_one(\n      object: { project_id: $project_id, user_id: $user_id }\n    ) {\n      project_id\n      user_id\n    }\n  }\n`;\nexport const getStaticProps = async ({\n  params\n}) => {\n  const hasura = hasuraUserClient();\n  const {\n    id\n  } = params;\n  const initialData = await hasura.request(GetProjectByID, {\n    id\n  });\n  const dataU = await hasura.request(GetUsers);\n  const dataz = await hasura.request(GetUsersbyproject, {\n    id\n  });\n  const dataf = await hasura.request(GetUsersWorkingOnthisProject, {\n    id\n  });\n  const tasks = await hasura.request(getTasks, {\n    id\n  });\n  return {\n    props: {\n      initialData,\n      dataU,\n      dataz,\n      dataf,\n      tasks\n    },\n    revalidate: 1\n  };\n};\nexport default function AssignTask({\n  initialData,\n  dataU,\n  dataz,\n  dataf,\n  tasks\n}) {\n  const hasura = hasuraUserClient();\n  const {\n    query\n  } = useRouter();\n  const router = useRouter();\n  const {\n    idP\n  } = query;\n\n  const _useForm = useForm(),\n        {\n    handleSubmit,\n    register,\n    control,\n    errors,\n    formState: {\n      isSubmitting\n    }\n  } = _useForm,\n        defaultValues = Object.assign({}, _useForm.defaultValues);\n\n  console.log(dataz.User);\n\n  const assign = async ({\n    id\n  }) => {\n    console.log(id);\n\n    if (confirm(`are you sure you want to assign the project to this employee? `)) {\n      try {\n        const {\n          insert_user_project_one\n        } = await hasura.request(assignu, {\n          project_id: query.id,\n          user_id: id\n        });\n        router.push(`/Project/List`);\n      } catch (err) {\n        console.log(err);\n      }\n    } else return null;\n  };\n\n  const onSubmit = async ({\n    Description,\n    name,\n    user_id\n  }) => {\n    console.log(from);\n\n    try {\n      const {\n        insert_Task_one\n      } = await hasura.request(insertmultiple, {\n        Description,\n        from,\n        name,\n        Project_id: query.id\n      });\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, \"test\"), \" \");\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/AssignTask/index.js"],"names":["useRouter","useSWR","useForm","Link","gql","hasuraUserClient","Form","format","parseISO","from","Date","toISOString","getProjectsIds","GetUsers","insertmultiple","GetUsersbyproject","getTasks","GetUsersWorkingOnthisProject","GetProjectByID","assignu","getStaticProps","params","hasura","id","initialData","request","dataU","dataz","dataf","tasks","props","revalidate","AssignTask","query","router","idP","handleSubmit","register","control","errors","formState","isSubmitting","defaultValues","console","log","User","assign","confirm","insert_user_project_one","project_id","user_id","push","err","onSubmit","Description","name","insert_Task_one","Project_id","window","location","reload","minHeight"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport useSWR from \"swr\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Link from \"next/link\";\r\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { format, parseISO } from \"date-fns\";\r\n\r\nconst from = new Date().toISOString();\r\n\r\nconst getProjectsIds = gql`\r\n  {\r\n    Project {\r\n      id\r\n      Title\r\n      Description\r\n    }\r\n  }\r\n`;\r\nconst GetUsers = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n      Name\r\n      Domain\r\n      Avatar\r\n    }\r\n  }\r\n`;\r\nconst insertmultiple = gql`\r\n  mutation MyMutation(\r\n    $Description: String!\r\n    $Project_id: Int!\r\n    $name: String!\r\n    $from: timestamptz!\r\n  ) {\r\n    insert_Task(\r\n      objects: {\r\n        Date: $from\r\n        Description: $Description\r\n        completed: false\r\n        Project_id: $Project_id\r\n        name: $name\r\n      }\r\n    ) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\nconst GetUsersbyproject = gql`\r\n  query MyQuery($id: Int!) {\r\n    User(\r\n      where: {\r\n        _not: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\r\n      }\r\n    ) {\r\n      Name\r\n      Avatar\r\n      Last_Name\r\n      email\r\n    }\r\n  }\r\n`;\r\nconst getTasks = gql`\r\n  query MyQuery($id: Int!) {\r\n    Task(where: { Project_id: { _eq: $id } }) {\r\n      id\r\n      Description\r\n      Date\r\n      completed\r\n      name\r\n      User {\r\n        Avatar\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GetUsersWorkingOnthisProject = gql`\r\n  query MyQuery($id: Int!) {\r\n    User(\r\n      where: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\r\n    ) {\r\n      id\r\n      Name\r\n      Domain\r\n      Avatar\r\n    }\r\n  }\r\n`;\r\nconst GetProjectByID = gql`\r\n  query GetProjectByID($id: Int!) {\r\n    Project_by_pk(id: $id) {\r\n      id\r\n      Title\r\n      Description\r\n      company_name\r\n      income\r\n    }\r\n  }\r\n`;\r\nconst assignu = gql`\r\n  mutation MyMutation($project_id: Int!, $user_id: Int!) {\r\n    insert_user_project_one(\r\n      object: { project_id: $project_id, user_id: $user_id }\r\n    ) {\r\n      project_id\r\n      user_id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getStaticProps = async ({ params }) => {\r\n  const hasura = hasuraUserClient();\r\n  const { id } = params;\r\n\r\n  const initialData = await hasura.request(GetProjectByID, { id });\r\n  const dataU = await hasura.request(GetUsers);\r\n  const dataz = await hasura.request(GetUsersbyproject, { id });\r\n  const dataf = await hasura.request(GetUsersWorkingOnthisProject, { id });\r\n  const tasks = await hasura.request(getTasks, { id });\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n      dataU,\r\n      dataz,\r\n      dataf,\r\n      tasks,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\n\r\nexport default function AssignTask({\r\n  initialData,\r\n  dataU,\r\n  dataz,\r\n  dataf,\r\n  tasks,\r\n}) {\r\n  const hasura = hasuraUserClient();\r\n  const { query } = useRouter();\r\n  const router = useRouter();\r\n  const { idP } = query;\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    errors,\r\n    formState: { isSubmitting },\r\n    defaultValues: { ...defaultValues },\r\n  } = useForm();\r\n  console.log(dataz.User);\r\n  const assign = async ({ id }) => {\r\n    console.log(id);\r\n    if (\r\n      confirm(`are you sure you want to assign the project to this employee? `)\r\n    ) {\r\n      try {\r\n        const { insert_user_project_one } = await hasura.request(assignu, {\r\n          project_id: query.id,\r\n          user_id: id,\r\n        });\r\n\r\n        router.push(`/Project/List`);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else return null;\r\n  };\r\n  const onSubmit = async ({ Description, name, user_id }) => {\r\n    console.log(from);\r\n    try {\r\n      const { insert_Task_one } = await hasura.request(insertmultiple, {\r\n        Description,\r\n        from,\r\n        name,\r\n        Project_id: query.id,\r\n      });\r\n\r\n      window.location.reload();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        test\r\n      </div>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}