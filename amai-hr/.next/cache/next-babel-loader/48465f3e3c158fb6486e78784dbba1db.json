{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nconst GetUserByEmail = gql`\n  query GetUserByEmail($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n    }\n  }\n`;\nconst InsertUser = gql`\n  mutation InsertUser($name: String!, $email: String!, $password: String!) {\n    insert_User_one(\n      object: { Name: $name, email: $email, password: $password }\n    ) {\n      id\n      Name\n      email\n      last_seen\n    }\n  }\n`;\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password: rawPassword\n  } = req.body;\n  console.log(process.env.HASURA_GRAPHQL_JWT_SECRET);\n  console.log(process.env.HASURA_GRAPHQL_ADMIN_SECRET);\n  const {\n    User: [foundUser]\n  } = await hasuraAdminClient.request(GetUserByEmail, {\n    email\n  });\n  if (foundUser) return res.status(400).json({\n    message: \"Unable to create account with the email provided. Try another.\"\n  });\n  const salt = await bcrypt.genSalt();\n  const password = await bcrypt.hash(rawPassword, salt);\n  const {\n    insert_User_one\n  } = await hasuraAdminClient.request(InsertUser, {\n    name,\n    email,\n    password\n  });\n  const token = jwt.sign({\n    \"https://hasura.io/jwt/claims\": {\n      \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\n      \"x-hasura-default-role\": \"user\",\n      \"x-hasura-user-id\": insert_User_one.id\n    }\n  }, \"7675F456A49B42FEC8DB59B3A51A172E57E95B3BF7765CACD1F56D2CD1\", {\n    subject: insert_User_one.Name\n  });\n  res.status(201).json(_objectSpread({\n    token\n  }, insert_User_one));\n});","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/api/register.js"],"names":["jwt","bcrypt","hasuraAdminClient","gql","GetUserByEmail","InsertUser","req","res","name","email","password","rawPassword","body","console","log","process","env","HASURA_GRAPHQL_JWT_SECRET","HASURA_GRAPHQL_ADMIN_SECRET","User","foundUser","request","status","json","message","salt","genSalt","hash","insert_User_one","token","sign","id","subject","Name"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SAASC,iBAAT,EAA4BC,GAA5B,QAAuC,+BAAvC;AAEA,MAAMC,cAAc,GAAGD,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,CANA;AAQA,MAAME,UAAU,GAAGF,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAaA,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,QAAQ,EAAEC;AAAzB,MAAyCL,GAAG,CAACM,IAAnD;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,yBAAxB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYE,2BAAxB;AAEA,QAAM;AACJC,IAAAA,IAAI,EAAE,CAACC,SAAD;AADF,MAEF,MAAMlB,iBAAiB,CAACmB,OAAlB,CAA0BjB,cAA1B,EAA0C;AAClDK,IAAAA;AADkD,GAA1C,CAFV;AAMA,MAAIW,SAAJ,EACE,OAAOb,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,IAAAA,OAAO,EAAE;AADiB,GAArB,CAAP;AAIF,QAAMC,IAAI,GAAG,MAAMxB,MAAM,CAACyB,OAAP,EAAnB;AACA,QAAMhB,QAAQ,GAAG,MAAMT,MAAM,CAAC0B,IAAP,CAAYhB,WAAZ,EAAyBc,IAAzB,CAAvB;AAEA,QAAM;AAAEG,IAAAA;AAAF,MAAsB,MAAM1B,iBAAiB,CAACmB,OAAlB,CAA0BhB,UAA1B,EAAsC;AACtEG,IAAAA,IADsE;AAEtEC,IAAAA,KAFsE;AAGtEC,IAAAA;AAHsE,GAAtC,CAAlC;AAMA,QAAMmB,KAAK,GAAG7B,GAAG,CAAC8B,IAAJ,CACZ;AACE,oCAAgC;AAC9B,gCAA0B,CAAC,OAAD,EAAU,MAAV,CADI;AAE9B,+BAAyB,MAFK;AAG9B,0BAAoBF,eAAe,CAACG;AAHN;AADlC,GADY,EAQZ,4DARY,EASZ;AACEC,IAAAA,OAAO,EAAEJ,eAAe,CAACK;AAD3B,GATY,CAAd;AAcA1B,EAAAA,GAAG,CAACe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AAAuBM,IAAAA;AAAvB,KAAiCD,eAAjC;AACD,CAxCD","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\n\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\n\nconst GetUserByEmail = gql`\n  query GetUserByEmail($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n    }\n  }\n`;\n\nconst InsertUser = gql`\n  mutation InsertUser($name: String!, $email: String!, $password: String!) {\n    insert_User_one(\n      object: { Name: $name, email: $email, password: $password }\n    ) {\n      id\n      Name\n      email\n      last_seen\n    }\n  }\n`;\n\nexport default async (req, res) => {\n  const { name, email, password: rawPassword } = req.body;\n  console.log(process.env.HASURA_GRAPHQL_JWT_SECRET);\n  console.log(process.env.HASURA_GRAPHQL_ADMIN_SECRET);\n\n  const {\n    User: [foundUser],\n  } = await hasuraAdminClient.request(GetUserByEmail, {\n    email,\n  });\n\n  if (foundUser)\n    return res.status(400).json({\n      message: \"Unable to create account with the email provided. Try another.\",\n    });\n\n  const salt = await bcrypt.genSalt();\n  const password = await bcrypt.hash(rawPassword, salt);\n\n  const { insert_User_one } = await hasuraAdminClient.request(InsertUser, {\n    name,\n    email,\n    password,\n  });\n\n  const token = jwt.sign(\n    {\n      \"https://hasura.io/jwt/claims\": {\n        \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\n        \"x-hasura-default-role\": \"user\",\n        \"x-hasura-user-id\": insert_User_one.id,\n      },\n    },\n    \"7675F456A49B42FEC8DB59B3A51A172E57E95B3BF7765CACD1F56D2CD1\",\n    {\n      subject: insert_User_one.Name,\n    }\n  );\n\n  res.status(201).json({ token, ...insert_User_one });\n};\n"]},"metadata":{},"sourceType":"module"}