{"ast":null,"code":"import fetch from \"isomorphic-unfetch\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\nlet accessToken = null;\n\nconst requestAccessToken = async () => {\n  if (accessToken) return;\n  const res = await fetch(`${process.env.APP_HOST}/api/session`);\n\n  if (res.ok) {\n    const json = await res.json();\n    accessToken = json.accessToken;\n  } else {\n    accessToken = \"public\";\n  }\n}; // remove cached token on 401 from the server\n\n\nconst resetTokenLink = onError(({\n  networkError\n}) => {\n  if (networkError && networkError.name === \"ServerError\" && networkError.statusCode === 401) {\n    accessToken = null;\n  }\n});\n\nconst createHttpLink = headers => {\n  const httpLink = new HttpLink({\n    uri: \"https://immortal-monkfish-39.hasura.app/v1/graphql\",\n    credentials: \"include\",\n    headers: {\n      \"X-Hasura-Admin-Secret\": \"IM3DA5b4JAkmBeQA5owPKk8H9ckptKkkIMIBHUPVwQKoq2d5RKY2i7e3hJD8cUjp\"\n    },\n    fetch\n  });\n  return httpLink;\n};\n\nconst createWSLink = () => {\n  return new WebSocketLink(new SubscriptionClient(\"wss://immortal-monkfish-39.hasura.app/v1/graphql\", {\n    lazy: true,\n    reconnect: true,\n    connectionParams: async () => {\n      await requestAccessToken(); // happens on the client\n\n      return {\n        headers: {\n          \"X-Hasura-Admin-Secret\": \"IM3DA5b4JAkmBeQA5owPKk8H9ckptKkkIMIBHUPVwQKoq2d5RKY2i7e3hJD8cUjp\"\n        }\n      };\n    }\n  }));\n};\n\nexport default function createApolloClient(initialState, headers) {\n  const ssrMode = true;\n  let link;\n\n  if (ssrMode) {\n    link = createHttpLink(headers);\n  } else {\n    link = createWSLink();\n  }\n\n  return new ApolloClient({\n    ssrMode,\n    link,\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/lib/apolloClient.js"],"names":["fetch","ApolloClient","InMemoryCache","HttpLink","onError","WebSocketLink","SubscriptionClient","accessToken","requestAccessToken","res","process","env","APP_HOST","ok","json","resetTokenLink","networkError","name","statusCode","createHttpLink","headers","httpLink","uri","credentials","createWSLink","lazy","reconnect","connectionParams","createApolloClient","initialState","ssrMode","link","cache","restore"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,kBAAT,QAAmC,4BAAnC;AAEA,IAAIC,WAAW,GAAG,IAAlB;;AAEA,MAAMC,kBAAkB,GAAG,YAAY;AACrC,MAAID,WAAJ,EAAiB;AAEjB,QAAME,GAAG,GAAG,MAAMT,KAAK,CAAE,GAAEU,OAAO,CAACC,GAAR,CAAYC,QAAS,cAAzB,CAAvB;;AACA,MAAIH,GAAG,CAACI,EAAR,EAAY;AACV,UAAMC,IAAI,GAAG,MAAML,GAAG,CAACK,IAAJ,EAAnB;AACAP,IAAAA,WAAW,GAAGO,IAAI,CAACP,WAAnB;AACD,GAHD,MAGO;AACLA,IAAAA,WAAW,GAAG,QAAd;AACD;AACF,CAVD,C,CAYA;;;AACA,MAAMQ,cAAc,GAAGX,OAAO,CAAC,CAAC;AAAEY,EAAAA;AAAF,CAAD,KAAsB;AACnD,MACEA,YAAY,IACZA,YAAY,CAACC,IAAb,KAAsB,aADtB,IAEAD,YAAY,CAACE,UAAb,KAA4B,GAH9B,EAIE;AACAX,IAAAA,WAAW,GAAG,IAAd;AACD;AACF,CAR6B,CAA9B;;AAUA,MAAMY,cAAc,GAAIC,OAAD,IAAa;AAClC,QAAMC,QAAQ,GAAG,IAAIlB,QAAJ,CAAa;AAC5BmB,IAAAA,GAAG,EAAE,oDADuB;AAE5BC,IAAAA,WAAW,EAAE,SAFe;AAG5BH,IAAAA,OAAO,EAAE;AACP,+BACE;AAFK,KAHmB;AAO5BpB,IAAAA;AAP4B,GAAb,CAAjB;AASA,SAAOqB,QAAP;AACD,CAXD;;AAaA,MAAMG,YAAY,GAAG,MAAM;AACzB,SAAO,IAAInB,aAAJ,CACL,IAAIC,kBAAJ,CAAuB,kDAAvB,EAA2E;AACzEmB,IAAAA,IAAI,EAAE,IADmE;AAEzEC,IAAAA,SAAS,EAAE,IAF8D;AAGzEC,IAAAA,gBAAgB,EAAE,YAAY;AAC5B,YAAMnB,kBAAkB,EAAxB,CAD4B,CACA;;AAC5B,aAAO;AACLY,QAAAA,OAAO,EAAE;AACP,mCACE;AAFK;AADJ,OAAP;AAMD;AAXwE,GAA3E,CADK,CAAP;AAeD,CAhBD;;AAkBA,eAAe,SAASQ,kBAAT,CAA4BC,YAA5B,EAA0CT,OAA1C,EAAmD;AAChE,QAAMU,OAAO,OAAb;AACA,MAAIC,IAAJ;;AACA,MAAID,OAAJ,EAAa;AACXC,IAAAA,IAAI,GAAGZ,cAAc,CAACC,OAAD,CAArB;AACD,GAFD,MAEO;AACLW,IAAAA,IAAI,GAAGP,YAAY,EAAnB;AACD;;AACD,SAAO,IAAIvB,YAAJ,CAAiB;AACtB6B,IAAAA,OADsB;AAEtBC,IAAAA,IAFsB;AAGtBC,IAAAA,KAAK,EAAE,IAAI9B,aAAJ,GAAoB+B,OAApB,CAA4BJ,YAA5B;AAHe,GAAjB,CAAP;AAKD","sourcesContent":["import fetch from \"isomorphic-unfetch\";\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\n\nlet accessToken = null;\n\nconst requestAccessToken = async () => {\n  if (accessToken) return;\n\n  const res = await fetch(`${process.env.APP_HOST}/api/session`);\n  if (res.ok) {\n    const json = await res.json();\n    accessToken = json.accessToken;\n  } else {\n    accessToken = \"public\";\n  }\n};\n\n// remove cached token on 401 from the server\nconst resetTokenLink = onError(({ networkError }) => {\n  if (\n    networkError &&\n    networkError.name === \"ServerError\" &&\n    networkError.statusCode === 401\n  ) {\n    accessToken = null;\n  }\n});\n\nconst createHttpLink = (headers) => {\n  const httpLink = new HttpLink({\n    uri: \"https://immortal-monkfish-39.hasura.app/v1/graphql\",\n    credentials: \"include\",\n    headers: {\n      \"X-Hasura-Admin-Secret\":\n        \"IM3DA5b4JAkmBeQA5owPKk8H9ckptKkkIMIBHUPVwQKoq2d5RKY2i7e3hJD8cUjp\",\n    },\n    fetch,\n  });\n  return httpLink;\n};\n\nconst createWSLink = () => {\n  return new WebSocketLink(\n    new SubscriptionClient(\"wss://immortal-monkfish-39.hasura.app/v1/graphql\", {\n      lazy: true,\n      reconnect: true,\n      connectionParams: async () => {\n        await requestAccessToken(); // happens on the client\n        return {\n          headers: {\n            \"X-Hasura-Admin-Secret\":\n              \"IM3DA5b4JAkmBeQA5owPKk8H9ckptKkkIMIBHUPVwQKoq2d5RKY2i7e3hJD8cUjp\",\n          },\n        };\n      },\n    })\n  );\n};\n\nexport default function createApolloClient(initialState, headers) {\n  const ssrMode = typeof window === \"undefined\";\n  let link;\n  if (ssrMode) {\n    link = createHttpLink(headers);\n  } else {\n    link = createWSLink();\n  }\n  return new ApolloClient({\n    ssrMode,\n    link,\n    cache: new InMemoryCache().restore(initialState),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}