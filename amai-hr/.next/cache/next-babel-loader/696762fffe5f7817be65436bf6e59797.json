{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GraphQLClient } from \"graphql-request\";\nexport { gql } from \"graphql-request\";\nexport const hasuraUserClient = () => {\n  let token;\n\n  if (false) {\n    const user = JSON.parse(localStorage.getItem(\"jamstackforum-auth\"));\n    token = user === null || user === void 0 ? void 0 : user.token;\n  }\n\n  return new GraphQLClient(process.env.NEXT_PUBLIC_HASURA_API_ENDPOINT, {\n    headers: _objectSpread({}, token && {\n      Authorization: `Bearer ${token}`\n    })\n  });\n};","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/lib/hasura-user-client.js"],"names":["GraphQLClient","gql","hasuraUserClient","token","user","JSON","parse","localStorage","getItem","process","env","NEXT_PUBLIC_HASURA_API_ENDPOINT","headers","Authorization"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC,MAAIC,KAAJ;;AAEA,aAAmC;AACjC,UAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,oBAArB,CAAX,CAAb;AAEAL,IAAAA,KAAK,GAAGC,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAED,KAAd;AACD;;AAED,SAAO,IAAIH,aAAJ,CAAkBS,OAAO,CAACC,GAAR,CAAYC,+BAA9B,EAA+D;AACpEC,IAAAA,OAAO,oBACDT,KAAK,IAAI;AAAEU,MAAAA,aAAa,EAAG,UAASV,KAAM;AAAjC,KADR;AAD6D,GAA/D,CAAP;AAKD,CAdM","sourcesContent":["import { GraphQLClient } from \"graphql-request\";\nexport { gql } from \"graphql-request\";\n\nexport const hasuraUserClient = () => {\n  let token;\n\n  if (typeof window !== \"undefined\") {\n    const user = JSON.parse(localStorage.getItem(\"jamstackforum-auth\"));\n\n    token = user?.token;\n  }\n\n  return new GraphQLClient(process.env.NEXT_PUBLIC_HASURA_API_ENDPOINT, {\n    headers: {\n      ...(token && { Authorization: `Bearer ${token}` }),\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}