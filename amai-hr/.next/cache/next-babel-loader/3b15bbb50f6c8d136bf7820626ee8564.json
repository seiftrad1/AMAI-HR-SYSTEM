{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nconst GetUserByEmail = gql`\n  query GetUserByEmail($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n    }\n  }\n`;\nconst InsertUser = gql`\n  mutation InsertUser($name: String!, $email: String!, $password: String!) {\n    insert_User_one(\n      object: { Name: $name, email: $email, password: $password }\n    ) {\n      id\n      Name\n      email\n      last_seen\n    }\n  }\n`;\nexport default (async (req, res) => {\n  const {\n    name,\n    email,\n    password: rawPassword\n  } = req.body;\n  console.log(process.env.HASURA_GRAPHQL_JWT_SECRET);\n  console.log(process.env.HASURA_GRAPHQL_ADMIN_SECRET);\n  const {\n    User: [foundUser]\n  } = await hasuraAdminClient.request(GetUserByEmail, {\n    email\n  });\n  if (foundUser) return res.status(400).json({\n    message: \"Unable to create account with the email provided. Try another.\"\n  });\n  const salt = await bcrypt.genSalt();\n  const password = await bcrypt.hash(rawPassword, salt);\n  const {\n    insert_User_one\n  } = await hasuraAdminClient.request(InsertUser, {\n    name,\n    email,\n    password\n  });\n  const token = jwt.sign({\n    \"https://hasura.io/jwt/claims\": {\n      \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\n      \"x-hasura-default-role\": \"user\",\n      \"x-hasura-user-id\": insert_User_one.id\n    }\n  }, \"7675F456A49B42FEC8DB59B3A51A172E57E95B3BF7765CACD1F56D2CD1\", {\n    subject: insert_User_one.Name\n  });\n  res.status(201).json(_objectSpread({\n    token\n  }, insert_User_one));\n});","map":null,"metadata":{},"sourceType":"module"}