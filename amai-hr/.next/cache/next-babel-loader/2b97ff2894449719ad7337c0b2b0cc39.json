{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport Layout from \"./Components/Layout\";\nimport startOfToday from \"date-fns/startOfToday\";\nimport { useAuthState } from \"../context/auth\";\nimport { gql, hasuraAdminClient } from \"../lib/hasura-admin-client\";\nimport { hasuraUserClient } from \"../lib/hasura-user-client\";\nconst from = new Date(startOfToday()).toISOString();\nconst GetUsers = gql`\n  {\n    User {\n      Name\n      id\n    }\n  }\n`;\nconst GetTodos = gql`\n  {\n    Todo {\n      Description\n      Name\n      Date\n      User {\n        Name\n        id\n      }\n    }\n  }\n`;\nconst InsertTask = gql`\n  mutation InsertTask(\n    $Description: String!\n    $Name: String!\n    $from: timestamptz!\n    $user_id: Int!\n  ) {\n    insert_Todo_one(\n      object: {\n        Description: $Description\n        Name: $Name\n        Date: $from\n        user_id: $user_id\n      }\n    ) {\n      Description\n      Date\n      Name\n      user_id\n    }\n  }\n`;\nexport const getStaticProps = async () => {\n  const {\n    User\n  } = await hasuraAdminClient.request(GetUsers);\n  return {\n    props: {\n      User\n    }\n  };\n};\nexport default function Todos({\n  User\n}) {\n  const router = useRouter();\n  const {\n    isAuthenticated,\n    user\n  } = useAuthState();\n  const hasura = hasuraUserClient();\n  const {\n    handleSubmit,\n    register,\n    control,\n    errors,\n    formState: {\n      isSubmitting\n    }\n  } = useForm();\n  useEffect(() => {\n    if (!isAuthenticated) router.push(\"/\");\n  }, [isAuthenticated]);\n  if (!isAuthenticated) return null;\n\n  const onSubmit = async ({\n    Description,\n    Name,\n    user_id\n  }) => {\n    console.log(from);\n\n    try {\n      const {\n        insert_Todo_one\n      } = await hasura.request(InsertTask, {\n        Description,\n        from,\n        Name,\n        user_id\n      });\n      router.push(`/CandidatList`);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Layout, null, __jsx(\"div\", {\n    className: \"page-content-wrapper\"\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    }\n  }, __jsx(\"div\", {\n    class: \"profile-content\"\n  }, __jsx(\"div\", {\n    class: \"row\"\n  }, __jsx(\"div\", {\n    class: \"col-md-12\"\n  }, __jsx(\"div\", {\n    class: \"portlet light \"\n  }, __jsx(\"div\", {\n    class: \"portlet-body\"\n  }, __jsx(\"div\", {\n    class: \"tab-content\"\n  }, __jsx(\"div\", {\n    class: \"tab-pane active\",\n    id: \"tab_1_1\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Name\"), __jsx(\"input\", {\n    name: \"Name\",\n    id: \"Name\",\n    type: \"text\",\n    placeholder: \"First Name\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Description\"), __jsx(\"input\", {\n    name: \"Description\",\n    id: \"Description\",\n    type: \"text\",\n    placeholder: \"Last Name\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"select\", {\n    name: \"user_id\",\n    id: \"user_id\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    }),\n    className: \"appearance-none bg-transparent w-full\"\n  }, User.map(({\n    id,\n    Name\n  }) => __jsx(React.Fragment, {\n    key: id\n  }, __jsx(\"option\", {\n    value: id\n  }, Name)))), __jsx(\"div\", {\n    class: \"margiv-top-10\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    class: \"btn green\",\n    disabled: isSubmitting\n  }, \" \", \"Save Changes\", \" \"), __jsx(\"a\", {\n    href: \"#\",\n    class: \"btn default\"\n  }, \" \", \"Cancel\", \" \"))))))))))), \" \")));\n}","map":null,"metadata":{},"sourceType":"module"}