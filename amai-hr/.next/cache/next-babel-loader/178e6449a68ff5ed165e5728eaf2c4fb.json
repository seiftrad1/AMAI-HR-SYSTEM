{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\Task.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport ReactMde from \"react-mde\";\nimport Markdown from \"react-markdown\";\nimport { useAuthState } from \"../context/auth\";\nimport { gql, hasuraAdminClient } from \"../lib/hasura-admin-client\";\nimport { hasuraUserClient } from \"../lib/hasura-user-client\";\nconst GetUsers = gql`\n  {\n    User {\n      Name\n      id\n    }\n  }\n`;\nconst InsertThread = gql`\n  mutation InsertThread(\n    $categoryId: uuid!\n    $title: String!\n    $message: String!\n  ) {\n    insert_threads_one(\n      object: {\n        category_id: $categoryId\n        title: $title\n        posts: { data: { message: $message } }\n      }\n    ) {\n      id\n      title\n      author {\n        name\n      }\n      category {\n        name\n      }\n      posts {\n        message\n      }\n      created_at\n    }\n  }\n`;\nexport const getStaticProps = async () => {\n  const {\n    users\n  } = await hasuraAdminClient.request(GetUsers);\n  return {\n    props: {\n      users\n    }\n  };\n};\nexport default function Task({\n  users\n}) {\n  const router = useRouter();\n  const {\n    isAuthenticated,\n    user\n  } = useAuthState();\n  const hasura = hasuraUserClient();\n  const {\n    handleSubmit,\n    register,\n    control,\n    errors,\n    formState: {\n      isSubmitting\n    }\n  } = useForm();\n  const {\n    0: selectedTab,\n    1: setSelectedTab\n  } = useState(\"write\");\n  useEffect(() => {\n    if (!isAuthenticated) router.push(\"/\");\n  }, [isAuthenticated]);\n  if (!isAuthenticated) return null;\n\n  const onSubmit = async ({\n    userId,\n    title,\n    message\n  }) => {\n    try {\n      const {\n        insert_threads_one\n      } = await hasura.request(InsertThread, {\n        categoryId,\n        title,\n        message\n      });\n      router.push(`/thread/${insert_threads_one.id}`);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, __jsx(TaskComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/Task.js"],"names":["useState","useEffect","useRouter","useForm","Controller","ReactMde","Markdown","useAuthState","gql","hasuraAdminClient","hasuraUserClient","GetUsers","InsertThread","getStaticProps","users","request","props","Task","router","isAuthenticated","user","hasura","handleSubmit","register","control","errors","formState","isSubmitting","selectedTab","setSelectedTab","push","onSubmit","userId","title","message","insert_threads_one","categoryId","id","err","console","log","minHeight"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,GAAT,EAAcC,iBAAd,QAAuC,4BAAvC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAEA,MAAMC,QAAQ,GAAGH,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMI,YAAY,GAAGJ,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3BA;AA6BA,OAAO,MAAMK,cAAc,GAAG,YAAY;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAY,MAAML,iBAAiB,CAACM,OAAlB,CAA0BJ,QAA1B,CAAxB;AAEA,SAAO;AACLK,IAAAA,KAAK,EAAE;AACLF,MAAAA;AADK;AADF,GAAP;AAKD,CARM;AAUP,eAAe,SAASG,IAAT,CAAc;AAAEH,EAAAA;AAAF,CAAd,EAAyB;AACtC,QAAMI,MAAM,GAAGhB,SAAS,EAAxB;AACA,QAAM;AAAEiB,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAA4Bb,YAAY,EAA9C;AACA,QAAMc,MAAM,GAAGX,gBAAgB,EAA/B;AACA,QAAM;AACJY,IAAAA,YADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,OAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AALP,MAMFxB,OAAO,EANX;AAOA,QAAM;AAAA,OAACyB,WAAD;AAAA,OAAcC;AAAd,MAAgC7B,QAAQ,CAAC,OAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACkB,eAAL,EAAsBD,MAAM,CAACY,IAAP,CAAY,GAAZ;AACvB,GAFQ,EAEN,CAACX,eAAD,CAFM,CAAT;AAIA,MAAI,CAACA,eAAL,EAAsB,OAAO,IAAP;;AAEtB,QAAMY,QAAQ,GAAG,OAAO;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,GAAP,KAAsC;AACrD,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAyB,MAAMd,MAAM,CAACN,OAAP,CAAeH,YAAf,EAA6B;AAChEwB,QAAAA,UADgE;AAEhEH,QAAAA,KAFgE;AAGhEC,QAAAA;AAHgE,OAA7B,CAArC;AAMAhB,MAAAA,MAAM,CAACY,IAAP,CAAa,WAAUK,kBAAkB,CAACE,EAAG,EAA7C;AACD,KARD,CAQE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,GAZD;;AAcA,SACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAE;AAAEG,MAAAA,SAAS,EAAE;AAAb,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF,CADF;AAWD","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport ReactMde from \"react-mde\";\r\nimport Markdown from \"react-markdown\";\r\n\r\nimport { useAuthState } from \"../context/auth\";\r\nimport { gql, hasuraAdminClient } from \"../lib/hasura-admin-client\";\r\nimport { hasuraUserClient } from \"../lib/hasura-user-client\";\r\n\r\nconst GetUsers = gql`\r\n  {\r\n    User {\r\n      Name\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst InsertThread = gql`\r\n  mutation InsertThread(\r\n    $categoryId: uuid!\r\n    $title: String!\r\n    $message: String!\r\n  ) {\r\n    insert_threads_one(\r\n      object: {\r\n        category_id: $categoryId\r\n        title: $title\r\n        posts: { data: { message: $message } }\r\n      }\r\n    ) {\r\n      id\r\n      title\r\n      author {\r\n        name\r\n      }\r\n      category {\r\n        name\r\n      }\r\n      posts {\r\n        message\r\n      }\r\n      created_at\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getStaticProps = async () => {\r\n  const { users } = await hasuraAdminClient.request(GetUsers);\r\n\r\n  return {\r\n    props: {\r\n      users,\r\n    },\r\n  };\r\n};\r\n\r\nexport default function Task({ users }) {\r\n  const router = useRouter();\r\n  const { isAuthenticated, user } = useAuthState();\r\n  const hasura = hasuraUserClient();\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    errors,\r\n    formState: { isSubmitting },\r\n  } = useForm();\r\n  const [selectedTab, setSelectedTab] = useState(\"write\");\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) router.push(\"/\");\r\n  }, [isAuthenticated]);\r\n\r\n  if (!isAuthenticated) return null;\r\n\r\n  const onSubmit = async ({ userId, title, message }) => {\r\n    try {\r\n      const { insert_threads_one } = await hasura.request(InsertThread, {\r\n        categoryId,\r\n        title,\r\n        message,\r\n      });\r\n\r\n      router.push(`/thread/${insert_threads_one.id}`);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <div className=\"page-content-wrapper\">\r\n          <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n            <TaskComponent />\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}