{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\UpdateTodo\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR, { mutate } from \"swr\";\nimport { useState } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useRouter } from \"next/router\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nconst Todos = gql`\n  query MyQuery {\n    User {\n      id\n    }\n  }\n`;\nconst GetCandidats = gql`\n  query MyQuery($id: Int!) {\n    todo_user(where: { user_id: { _eq: $id } }) {\n      id\n      todo_id\n      completed\n      user_id\n      Todo {\n        Description\n        Name\n        Type\n        id\n        Date\n      }\n    }\n  }\n`;\nconst UpdateCompleted = gql`\n  mutation MyMutation($id: Int!) {\n    update_todo_user_by_pk(pk_columns: { id: $id }, _set: { completed: true }) {\n      id\n    }\n  }\n`;\nconst getAdminIDs = gql`\n  query MyQuery {\n    User(where: { Role: { _eq: \"Admin\" } }) {\n      id\n    }\n  }\n`;\nconst AddNotification = gql`\n  mutation MyMutation($objects: [notification_insert_input!]!) {\n    insert_notification(objects: $objects) {\n      affected_rows\n    }\n  }\n`;\nexport const getStaticPaths = async () => {\n  const hasura = hasuraUserClient();\n  const {\n    User\n  } = await hasura.request(Todos);\n  return {\n    paths: User.map(({\n      id\n    }) => ({\n      params: {\n        id: id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const hasura = hasuraUserClient();\n  const {\n    id\n  } = params;\n  console.log(params);\n  const initialData = await hasura.request(GetCandidats, {\n    id\n  });\n  const Admins = await hasura.request(getAdminIDs);\n  return {\n    props: {\n      initialData,\n      Admins\n    },\n    revalidate: 1\n  };\n};\nexport default function TodoList({\n  initialData,\n  Admins\n}) {\n  const hasura = hasuraUserClient();\n  const {\n    query\n  } = useRouter();\n  const {\n    id\n  } = query;\n  const {\n    0: acc,\n    1: setAcc\n  } = useState(true);\n  const {\n    data\n  } = useSWR([GetCandidats, id], (query, id) => hasura.request(query), {\n    initialData,\n    revalidateOnMount: true\n  });\n\n  const view = () => {\n    setAcc(false);\n  };\n\n  const Complete = async ({\n    id\n  }) => {\n    console.log(id);\n\n    try {\n      const {\n        update_todo_user_by_pk\n      } = await hasura.request(UpdateCompleted, {\n        id\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const whencompleted = async () => {\n    const t = Admins.User.map(({\n      id\n    }) => {\n      return {\n        name: \"onboarding tasks\",\n        description: \"onboarding tasks completed\",\n        user_id: id,\n        seen: false\n      };\n    });\n\n    try {\n      const {\n        insert_notification\n      } = await hasura.request(AddNotification, {\n        objects: t\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, \" \", __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    class: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    class: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    class: \"col-md-8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    class: \"card card-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    class: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, __jsx(\"ul\", {\n    class: \"nav nav-pills todo-nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 19\n    }\n  }, __jsx(\"li\", {\n    role: \"presentation\",\n    class: \"nav-item all-task active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    class: \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 23\n    }\n  }, \"All\")), __jsx(\"li\", {\n    role: \"presentation\",\n    class: \"nav-item active-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 21\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    class: \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 23\n    }\n  }, \"Active\")), __jsx(\"li\", {\n    role: \"presentation\",\n    class: \"nav-item completed-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    class: \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 23\n    }\n  }, \"Completed\"))), \" \", data.todo_user.map(({\n    id,\n    Description,\n    Name,\n    Completed,\n    Todo\n  }) => {\n    return __jsx(\"div\", {\n      key: id,\n      class: \"todo-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, !Completed ? __jsx(\"div\", {\n      class: \"todo-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }\n    }, __jsx(\"div\", {\n      class: \"checker\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 31\n      }\n    }, __jsx(\"span\", {\n      class: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }, __jsx(\"input\", {\n      name: \"Completed\",\n      type: \"checkbox\",\n      onChange: () => Complete({\n        id\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 35\n      }\n    }))), \" \", \"\", __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 31\n      }\n    }, Todo.Name, \": \", Todo.Description)) : __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }));\n  }), \" \"))), \" \", __jsx(\"div\", {\n    className: \"col-md-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    class: \"portlet light \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    class: \"portlet-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, \" \", acc ? __jsx(\"div\", {\n    class: \"btn-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }\n  }, \"Task completed?\", __jsx(\"button\", {\n    className: \"btn green\",\n    type: \"submit\",\n    onClick: () => view(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 23\n    }\n  }, \" \", \"yes\", \" \")) : __jsx(\"div\", {\n    class: \"btn-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 21\n    }\n  }, __jsx(\"button\", {\n    onClick: () => whencompleted(),\n    className: \"btn green\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 23\n    }\n  }, \" \", \"ping admin\")))))))));\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/UpdateTodo/[id].js"],"names":["useSWR","mutate","useState","gql","useRouter","hasuraUserClient","Todos","GetCandidats","UpdateCompleted","getAdminIDs","AddNotification","getStaticPaths","hasura","User","request","paths","map","id","params","toString","fallback","getStaticProps","console","log","initialData","Admins","props","revalidate","TodoList","query","acc","setAcc","data","revalidateOnMount","view","Complete","update_todo_user_by_pk","err","whencompleted","t","name","description","user_id","seen","insert_notification","objects","minHeight","todo_user","Description","Name","Completed","Todo"],"mappings":"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","sourcesContent":["import useSWR, { mutate } from \"swr\";\r\nimport { useState } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { useRouter } from \"next/router\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nconst Todos = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst GetCandidats = gql`\r\n  query MyQuery($id: Int!) {\r\n    todo_user(where: { user_id: { _eq: $id } }) {\r\n      id\r\n      todo_id\r\n      completed\r\n      user_id\r\n      Todo {\r\n        Description\r\n        Name\r\n        Type\r\n        id\r\n        Date\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst UpdateCompleted = gql`\r\n  mutation MyMutation($id: Int!) {\r\n    update_todo_user_by_pk(pk_columns: { id: $id }, _set: { completed: true }) {\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst getAdminIDs = gql`\r\n  query MyQuery {\r\n    User(where: { Role: { _eq: \"Admin\" } }) {\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst AddNotification = gql`\r\n  mutation MyMutation($objects: [notification_insert_input!]!) {\r\n    insert_notification(objects: $objects) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\nexport const getStaticPaths = async () => {\r\n  const hasura = hasuraUserClient();\r\n\r\n  const { User } = await hasura.request(Todos);\r\n\r\n  return {\r\n    paths: User.map(({ id }) => ({\r\n      params: {\r\n        id: id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n};\r\nexport const getStaticProps = async ({ params }) => {\r\n  const hasura = hasuraUserClient();\r\n  const { id } = params;\r\n\r\n  console.log(params);\r\n\r\n  const initialData = await hasura.request(GetCandidats, { id });\r\n  const Admins = await hasura.request(getAdminIDs);\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n      Admins,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\n\r\nexport default function TodoList({ initialData, Admins }) {\r\n  const hasura = hasuraUserClient();\r\n  const { query } = useRouter();\r\n  const { id } = query;\r\n  const [acc, setAcc] = useState(true);\r\n\r\n  const { data } = useSWR(\r\n    [GetCandidats, id],\r\n\r\n    (query, id) => hasura.request(query),\r\n    {\r\n      initialData,\r\n      revalidateOnMount: true,\r\n    }\r\n  );\r\n  const view = () => {\r\n    setAcc(false);\r\n  };\r\n  const Complete = async ({ id }) => {\r\n    console.log(id);\r\n    try {\r\n      const { update_todo_user_by_pk } = await hasura.request(UpdateCompleted, {\r\n        id,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const whencompleted = async () => {\r\n    const t = Admins.User.map(({ id }) => {\r\n      return {\r\n        name: \"onboarding tasks\",\r\n        description: \"onboarding tasks completed\",\r\n        user_id: id,\r\n        seen: false,\r\n      };\r\n    });\r\n    try {\r\n      const { insert_notification } = await hasura.request(AddNotification, {\r\n        objects: t,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      {\" \"}\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        <div class=\"container\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-8\">\r\n              <div class=\"card card-white\">\r\n                <div class=\"card-body\">\r\n                  <ul class=\"nav nav-pills todo-nav\">\r\n                    <li role=\"presentation\" class=\"nav-item all-task active\">\r\n                      <a href=\"#\" class=\"nav-link\">\r\n                        All\r\n                      </a>\r\n                    </li>\r\n                    <li role=\"presentation\" class=\"nav-item active-task\">\r\n                      <a href=\"#\" class=\"nav-link\">\r\n                        Active\r\n                      </a>\r\n                    </li>\r\n                    <li role=\"presentation\" class=\"nav-item completed-task\">\r\n                      <a href=\"#\" class=\"nav-link\">\r\n                        Completed\r\n                      </a>\r\n                    </li>\r\n                  </ul>{\" \"}\r\n                  {data.todo_user.map(\r\n                    ({ id, Description, Name, Completed, Todo }) => {\r\n                      return (\r\n                        <div key={id} class=\"todo-list\">\r\n                          {!Completed ? (\r\n                            <div class=\"todo-item\">\r\n                              <div class=\"checker\">\r\n                                <span class=\"\">\r\n                                  <input\r\n                                    name=\"Completed\"\r\n                                    type=\"checkbox\"\r\n                                    onChange={() => Complete({ id })}\r\n                                  />\r\n                                </span>\r\n                              </div>{\" \"}\r\n                              {\"\"}\r\n                              <span>\r\n                                {Todo.Name}: {Todo.Description}\r\n                              </span>\r\n                              {/* <a\r\n                                href=\"javascript:void(0);\"\r\n                                class=\"float-right remove-todo-item\"\r\n                                onClick={() => deleteTodo({ id })}\r\n                              >\r\n                                <i class=\"icon-close\"></i>\r\n                              </a> */}\r\n                            </div>\r\n                          ) : (\r\n                            <div></div>\r\n                          )}\r\n                        </div>\r\n                      );\r\n                    }\r\n                  )}{\" \"}\r\n                </div>\r\n              </div>\r\n            </div>{\" \"}\r\n            <div className=\"col-md-4\">\r\n              <div class=\"portlet light \">\r\n                <div class=\"portlet-body\">\r\n                  {\" \"}\r\n                  {acc ? (\r\n                    <div class=\"btn-group\">\r\n                      Task completed?\r\n                      <button\r\n                        className=\"btn green\"\r\n                        type=\"submit\"\r\n                        onClick={() => view()}\r\n                      >\r\n                        {\" \"}\r\n                        yes{\" \"}\r\n                      </button>\r\n                    </div>\r\n                  ) : (\r\n                    <div class=\"btn-group\">\r\n                      <button\r\n                        onClick={() => whencompleted()}\r\n                        className=\"btn green\"\r\n                        type=\"submit\"\r\n                      >\r\n                        {\" \"}\r\n                        ping admin\r\n                      </button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}