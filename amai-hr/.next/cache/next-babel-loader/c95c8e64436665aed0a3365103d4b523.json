{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\email.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FormControl, FormLabel, Button } from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nexport default function MembersPage(_ref) {\n  _s();\n\n  var initialData = _ref.initialData;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      control = _useForm.control,\n      errors = _useForm.errors,\n      isSubmitting = _useForm.formState.isSubmitting;\n\n  var sendMail = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"/api/contact\", {\n                \"method\": \"POST\",\n                \"headers\": {\n                  \"content-type\": \"application/json\"\n                },\n                \"body\": JSON.stringify(data)\n              });\n\n            case 3:\n              //if sucess do whatever you like, i.e toast notification\n              setTimeout(function () {\n                return reset();\n              }, 2000);\n              _context.next = 8;\n              break;\n\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 6]]);\n    }));\n\n    return function sendMail(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(sendMail),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 1\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 3\n    }\n  }, __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"subject\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, \"Subject\"), __jsx(Input, _extends({\n    id: \"subject\",\n    type: \"text\",\n    name: \"subject\"\n  }, inputProps, {\n    ref: register(setValidation('Subject', false, 2)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  })), __jsx(ErrorMessage, {\n    errors: errors,\n    name: \"subject\",\n    as: __jsx(Text, {\n      color: \"red.600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 56\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  })), __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Name\"), __jsx(Input, _extends({\n    id: \"name\",\n    type: \"name\",\n    name: \"name\",\n    ref: register(setValidation('Name'))\n  }, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  })), __jsx(ErrorMessage, {\n    errors: errors,\n    name: \"name\",\n    as: __jsx(Text, {\n      color: \"red.600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 53\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  })), __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Email address\"), __jsx(Input, _extends({\n    id: \"email\",\n    type: \"email\",\n    name: \"email\",\n    ref: register(_objectSpread({}, setValidation('Email')))\n  }, inputProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  })), __jsx(ErrorMessage, {\n    errors: errors,\n    name: \"email\",\n    as: __jsx(Text, {\n      color: \"red.600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 54\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  })), __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: \"message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, \"Message\"), __jsx(Textarea, _extends({\n    id: \"message\",\n    type: \"textarea\",\n    name: \"message\",\n    ref: register(setValidation('Message', true))\n  }, inputProps, {\n    h: 300,\n    resize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  })), __jsx(ErrorMessage, {\n    errors: errors,\n    name: \"message\",\n    as: __jsx(Text, {\n      color: \"red.600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 56\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  })), __jsx(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, __jsx(Button, {\n    type: \"submit\",\n    color: \"white\",\n    bg: \"gray.900\",\n    width: \"100%\",\n    h: 55,\n    mt: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"Submit\"))));\n}\n\n_s(MembersPage, \"kNPKtSvqkdXo+zAIrEA1BdayXrQ=\", false, function () {\n  return [useForm];\n});\n\n_c = MembersPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MembersPage\");","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/email.js"],"names":["FormControl","FormLabel","Button","useForm","MembersPage","initialData","handleSubmit","register","control","errors","isSubmitting","formState","sendMail","data","fetch","JSON","stringify","setTimeout","reset","inputProps","setValidation"],"mappings":";;;;;;;;;;;;;;;AAEA,SAASA,WAAT,EAAqBC,SAArB,EAA+BC,MAA/B,QAA6C,iBAA7C;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA,eAAe,SAASC,WAAT,OAAsC;AAAA;;AAAA,MAAfC,WAAe,QAAfA,WAAe;;AACnD,iBAMIF,OAAO,EANX;AAAA,MACEG,YADF,YACEA,YADF;AAAA,MAEEC,QAFF,YAEEA,QAFF;AAAA,MAGEC,OAHF,YAGEA,OAHF;AAAA,MAIEC,MAJF,YAIEA,MAJF;AAAA,MAKeC,YALf,YAKEC,SALF,CAKeD,YALf;;AAOA,MAAME,QAAQ;AAAA,yEAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGPC,KAAK,CAAC,cAAD,EAAiB;AAC1B,0BAAU,MADgB;AAE1B,2BAAW;AAAE,kCAAgB;AAAlB,iBAFe;AAG1B,wBAAQC,IAAI,CAACC,SAAL,CAAeH,IAAf;AAHkB,eAAjB,CAHE;;AAAA;AASP;AACNI,cAAAA,UAAU,CAAC;AAAA,uBAAMC,KAAK,EAAX;AAAA,eAAD,EAAgB,IAAhB,CAAV;AAVa;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARN,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAgBA,SACF;AAAM,IAAA,QAAQ,EAAEN,YAAY,CAACM,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,MAAC,KAAD;AAAO,IAAA,EAAE,EAAC,SAAV;AAAoB,IAAA,IAAI,EAAC,MAAzB;AAAgC,IAAA,IAAI,EAAC;AAArC,KAAoDO,UAApD;AAAgE,IAAA,GAAG,EAAEZ,QAAQ,CAACa,aAAa,CAAC,SAAD,EAAY,KAAZ,EAAmB,CAAnB,CAAd,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEX,MAAtB;AAA8B,IAAA,IAAI,EAAC,SAAnC;AAA6C,IAAA,EAAE,EAAE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFF,EAQE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAC,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE,MAAC,KAAD;AAAO,IAAA,EAAE,EAAC,MAAV;AAAiB,IAAA,IAAI,EAAC,MAAtB;AAA6B,IAAA,IAAI,EAAC,MAAlC;AAAyC,IAAA,GAAG,EAAEF,QAAQ,CAACa,aAAa,CAAC,MAAD,CAAd;AAAtD,KAAmFD,UAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEV,MAAtB;AAA8B,IAAA,IAAI,EAAC,MAAnC;AAA0C,IAAA,EAAE,EAAE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CARF,EAcE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,MAAC,KAAD;AAAO,IAAA,EAAE,EAAC,OAAV;AAAkB,IAAA,IAAI,EAAC,OAAvB;AAA+B,IAAA,IAAI,EAAC,OAApC;AAA4C,IAAA,GAAG,EAAEF,QAAQ,mBAAMa,aAAa,CAAC,OAAD,CAAnB;AAAzD,KAA+FD,UAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEV,MAAtB;AAA8B,IAAA,IAAI,EAAC,OAAnC;AAA2C,IAAA,EAAE,EAAE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAdF,EAoBE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE,MAAC,QAAD;AAAU,IAAA,EAAE,EAAC,SAAb;AAAuB,IAAA,IAAI,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAC,SAA5C;AAAsD,IAAA,GAAG,EAAEF,QAAQ,CAACa,aAAa,CAAC,SAAD,EAAY,IAAZ,CAAd;AAAnE,KAAyGD,UAAzG;AAAqH,IAAA,CAAC,EAAE,GAAxH;AAA6H,IAAA,MAAM,EAAC,MAApI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAEV,MAAtB;AAA8B,IAAA,IAAI,EAAC,SAAnC;AAA6C,IAAA,EAAE,EAAE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAC,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CApBF,EA0BE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,KAAK,EAAC,OAA5B;AAAoC,IAAA,EAAE,EAAC,UAAvC;AAAkD,IAAA,KAAK,EAAC,MAAxD;AAA+D,IAAA,CAAC,EAAE,EAAlE;AAAsE,IAAA,EAAE,EAAE,CAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,CA1BF,CADF,CADE;AAoCD;;GA5DuBL,W;UAOlBD,O;;;KAPkBC,W","sourcesContent":["\r\n\r\nimport { FormControl,FormLabel,Button } from \"react-bootstrap\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport default function MembersPage({ initialData }) {\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    errors,\r\n    formState: { isSubmitting },\r\n  } = useForm();\r\n  const sendMail = async (data) => {\r\n\r\n    try {\r\n      await fetch(\"/api/contact\", {\r\n        \"method\": \"POST\",\r\n        \"headers\": { \"content-type\": \"application/json\" },\r\n        \"body\": JSON.stringify(data)\r\n      })\r\n\r\n            //if sucess do whatever you like, i.e toast notification\r\n      setTimeout(() => reset(), 2000);\r\n    } catch (error) {\r\n        // toast error message. whatever you wish \r\n    }\r\n\r\n  }\r\n  return (\r\n<form onSubmit={handleSubmit(sendMail)}>\r\n  <div>\r\n\r\n    <FormControl >\r\n      <FormLabel htmlFor=\"subject\">Subject</FormLabel>\r\n      <Input id='subject' type=\"text\" name=\"subject\"  {...inputProps} ref={register(setValidation('Subject', false, 2))} />\r\n      <ErrorMessage errors={errors} name='subject' as={<Text color='red.600' />} />\r\n    </FormControl>\r\n\r\n    <FormControl>\r\n      <FormLabel htmlFor=\"name\" >Name</FormLabel>\r\n      <Input id='name' type=\"name\" name=\"name\" ref={register(setValidation('Name'))} {...inputProps} />\r\n      <ErrorMessage errors={errors} name='name' as={<Text color='red.600' />} />\r\n    </FormControl>\r\n\r\n    <FormControl>\r\n      <FormLabel htmlFor=\"email\" >Email address</FormLabel>\r\n      <Input id='email' type=\"email\" name=\"email\" ref={register({ ...setValidation('Email') })}  {...inputProps} />\r\n      <ErrorMessage errors={errors} name='email' as={<Text color='red.600' />} />\r\n    </FormControl>\r\n\r\n    <FormControl>\r\n      <FormLabel htmlFor=\"message\">Message</FormLabel>\r\n      <Textarea id='message' type='textarea' name=\"message\" ref={register(setValidation('Message', true))} {...inputProps} h={300} resize='none' />\r\n      <ErrorMessage errors={errors} name='message' as={<Text color='red.600' />} />\r\n    </FormControl>\r\n\r\n    <FormControl>\r\n      <Button type='submit' color='white' bg='gray.900' width='100%' h={55} mt={5}>\r\n        Submit\r\n        </Button>\r\n    </FormControl>\r\n   </div>\r\n</form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}