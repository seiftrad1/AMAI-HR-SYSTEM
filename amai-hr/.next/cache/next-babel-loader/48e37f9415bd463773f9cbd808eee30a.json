{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\TaskAssign\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport { useForm } from \"react-hook-form\";\nimport Link from \"next/link\";\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nimport { useEffect } from \"react\";\nimport { TextField } from \"@material-ui/core\";\nimport { Form } from \"react-bootstrap\";\nimport { useState } from \"react\";\nconst today = new Date().toISOString().substring(0, 19);\nconst getProjectsIds = gql`\n  {\n    Project {\n      id\n      Description\n      created_at\n      Title\n      delivery_date\n      assigned\n      contact_date\n      company_name\n      type\n      file\n      income\n    }\n  }\n`;\nconst GetProjectByID = gql`\n  query GetProjectByID($id: Int!) {\n    Project_by_pk(id: $id) {\n      id\n      Description\n      created_at\n      Title\n      delivery_date\n      assigned\n      contact_date\n      company_name\n      type\n      file\n      income\n    }\n  }\n`;\nconst GetProjectByUser = gql`\n  query User($id: Int!) {\n    User(where: { project_id: { _is_null: true } }) {\n      id\n      Name\n    }\n  }\n`;\nexport const getStaticPaths = async () => {\n  const hasura = hasuraUserClient();\n  const {\n    Project\n  } = await hasura.request(getProjectsIds);\n  return {\n    paths: Project.map(({\n      id\n    }) => ({\n      params: {\n        id: id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const hasura = hasuraUserClient();\n  const {\n    id\n  } = params;\n  const initialData = await hasura.request(GetProjectByID, {\n    id\n  });\n  return {\n    props: {\n      initialData\n    },\n    revalidate: 1\n  };\n};\nconst UpdateProject = gql`\n  mutation update_Candidate_by_pk(\n    $id: Int!\n    $Title: String!\n    $Description: String!\n    $company_name: String!\n    $type: String!\n    $income: String!\n  ) {\n    update_Project_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n        Title: $Title\n        Description: $Description\n        company_name: $company_name\n        type: $type\n        income: $income\n      }\n    ) {\n      id\n      Title\n      Description\n      created_at\n      delivery_date\n      assigned\n      contact_date\n      company_name\n      type\n      income\n    }\n  }\n`;\nexport default function TaskEdit({\n  initialData\n}) {\n  const hasura = hasuraUserClient();\n  const {\n    query\n  } = useRouter();\n  const router = useRouter();\n  const {\n    isAuthenticated,\n    user\n  } = useAuthState();\n  const {\n    0: File,\n    1: setFile\n  } = useState(null);\n  const {\n    0: state,\n    1: setState\n  } = useState(false);\n  const {\n    0: createObjectURL,\n    1: setCreateObjectURL\n  } = useState(null);\n  useEffect(() => {\n    if (!isAuthenticated) router.push(\"/\");\n  }, [isAuthenticated]);\n  const {\n    id\n  } = query;\n\n  const _useForm = useForm(),\n        {\n    handleSubmit,\n    register,\n    control,\n    errors,\n    formState: {\n      isSubmitting\n    }\n  } = _useForm,\n        defaultValues = Object.assign({}, _useForm.defaultValues);\n\n  const {\n    data,\n    mutate\n  } = useSWR([GetProjectByID, id], (query, id) => hasura.request(query, {\n    id\n  }), {\n    initialData,\n    revalidateOnMount: true\n  });\n\n  const uploadFileToClient = event => {\n    if (event.target.files && event.target.files[0]) {\n      const i = event.target.files[0];\n      setFile(i);\n      setState(true);\n      setCreateObjectURL(URL.createObjectURL(i));\n    }\n  };\n\n  const uploadFileToServer = async () => {\n    const body = new FormData();\n    body.append(\"file\", File);\n    const response = await fetch(\"/api/file/\", {\n      method: \"POST\",\n      body\n    });\n    const UploadFile = gql`\n      mutation MyMutation($file: String!, $id: Int!) {\n        update_Project_by_pk(pk_columns: { id: $id }, _set: { file: $file }) {\n          file\n        }\n      }\n    `;\n\n    try {\n      const {\n        update_Project_by_pk\n      } = await hasura.request(UploadFile, {\n        id,\n        file: File.name\n      });\n      window.location.reload();\n    } catch (error) {\n      console.error(error);\n    }\n\n    return;\n  };\n\n  const onSubmit = async ({\n    Title,\n    Description,\n    company_name,\n    income,\n    type\n  }) => {\n    try {\n      const id = data.Project_by_pk.id;\n      console.log(id);\n      const {\n        update_Project_by_pk\n      } = await hasura.request(UpdateProject, {\n        id,\n        Title,\n        Description,\n        company_name,\n        income,\n        type\n      });\n      mutate(_objectSpread(_objectSpread({}, data), update_Project_by_pk));\n      router.push(`/Project/List`);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const addproject = () => {\n    const pathname = `/Project/List`;\n    location.replace(pathname);\n  };\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    class: \"profile-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, \"test\")));\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/TaskAssign/[id].js"],"names":["useRouter","useSWR","useForm","Link","gql","hasuraUserClient","useAuthState","useAuthDispatch","useEffect","TextField","Form","useState","today","Date","toISOString","substring","getProjectsIds","GetProjectByID","GetProjectByUser","getStaticPaths","hasura","Project","request","paths","map","id","params","toString","fallback","getStaticProps","initialData","props","revalidate","UpdateProject","TaskEdit","query","router","isAuthenticated","user","File","setFile","state","setState","createObjectURL","setCreateObjectURL","push","handleSubmit","register","control","errors","formState","isSubmitting","defaultValues","data","mutate","revalidateOnMount","uploadFileToClient","event","target","files","i","URL","uploadFileToServer","body","FormData","append","response","fetch","method","UploadFile","update_Project_by_pk","file","name","window","location","reload","error","console","onSubmit","Title","Description","company_name","income","type","Project_by_pk","log","err","addproject","pathname","replace","minHeight"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport useSWR from \"swr\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Link from \"next/link\";\r\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\r\nimport { useEffect } from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\n\r\nconst today = new Date().toISOString().substring(0, 19);\r\n\r\nconst getProjectsIds = gql`\r\n  {\r\n    Project {\r\n      id\r\n      Description\r\n      created_at\r\n      Title\r\n      delivery_date\r\n      assigned\r\n      contact_date\r\n      company_name\r\n      type\r\n      file\r\n      income\r\n    }\r\n  }\r\n`;\r\n\r\nconst GetProjectByID = gql`\r\n  query GetProjectByID($id: Int!) {\r\n    Project_by_pk(id: $id) {\r\n      id\r\n      Description\r\n      created_at\r\n      Title\r\n      delivery_date\r\n      assigned\r\n      contact_date\r\n      company_name\r\n      type\r\n      file\r\n      income\r\n    }\r\n  }\r\n`;\r\nconst GetProjectByUser = gql`\r\n  query User($id: Int!) {\r\n    User(where: { project_id: { _is_null: true } }) {\r\n      id\r\n      Name\r\n    }\r\n  }\r\n`;\r\nexport const getStaticPaths = async () => {\r\n  const hasura = hasuraUserClient();\r\n\r\n  const { Project } = await hasura.request(getProjectsIds);\r\n\r\n  return {\r\n    paths: Project.map(({ id }) => ({\r\n      params: {\r\n        id: id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n};\r\n\r\nexport const getStaticProps = async ({ params }) => {\r\n  const hasura = hasuraUserClient();\r\n  const { id } = params;\r\n\r\n  const initialData = await hasura.request(GetProjectByID, { id });\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\nconst UpdateProject = gql`\r\n  mutation update_Candidate_by_pk(\r\n    $id: Int!\r\n    $Title: String!\r\n    $Description: String!\r\n    $company_name: String!\r\n    $type: String!\r\n    $income: String!\r\n  ) {\r\n    update_Project_by_pk(\r\n      pk_columns: { id: $id }\r\n      _set: {\r\n        Title: $Title\r\n        Description: $Description\r\n        company_name: $company_name\r\n        type: $type\r\n        income: $income\r\n      }\r\n    ) {\r\n      id\r\n      Title\r\n      Description\r\n      created_at\r\n      delivery_date\r\n      assigned\r\n      contact_date\r\n      company_name\r\n      type\r\n      income\r\n    }\r\n  }\r\n`;\r\nexport default function TaskEdit({ initialData }) {\r\n  const hasura = hasuraUserClient();\r\n  const { query } = useRouter();\r\n  const router = useRouter();\r\n  const { isAuthenticated, user } = useAuthState();\r\n  const [File, setFile] = useState(null);\r\n  const [state, setState] = useState(false);\r\n\r\n  const [createObjectURL, setCreateObjectURL] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) router.push(\"/\");\r\n  }, [isAuthenticated]);\r\n\r\n  const { id } = query;\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    errors,\r\n    formState: { isSubmitting },\r\n    defaultValues: { ...defaultValues },\r\n  } = useForm();\r\n  const { data, mutate } = useSWR(\r\n    [GetProjectByID, id],\r\n    (query, id) => hasura.request(query, { id }),\r\n    {\r\n      initialData,\r\n      revalidateOnMount: true,\r\n    }\r\n  );\r\n  const uploadFileToClient = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      const i = event.target.files[0];\r\n      setFile(i);\r\n      setState(true);\r\n      setCreateObjectURL(URL.createObjectURL(i));\r\n    }\r\n  };\r\n  const uploadFileToServer = async () => {\r\n    const body = new FormData();\r\n    body.append(\"file\", File);\r\n    const response = await fetch(\"/api/file/\", {\r\n      method: \"POST\",\r\n      body,\r\n    });\r\n\r\n    const UploadFile = gql`\r\n      mutation MyMutation($file: String!, $id: Int!) {\r\n        update_Project_by_pk(pk_columns: { id: $id }, _set: { file: $file }) {\r\n          file\r\n        }\r\n      }\r\n    `;\r\n    try {\r\n      const { update_Project_by_pk } = await hasura.request(UploadFile, {\r\n        id,\r\n        file: File.name,\r\n      });\r\n      window.location.reload();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return;\r\n  };\r\n  const onSubmit = async ({\r\n    Title,\r\n    Description,\r\n    company_name,\r\n    income,\r\n    type,\r\n  }) => {\r\n    try {\r\n      const id = data.Project_by_pk.id;\r\n      console.log(id);\r\n      const { update_Project_by_pk } = await hasura.request(UpdateProject, {\r\n        id,\r\n        Title,\r\n        Description,\r\n        company_name,\r\n        income,\r\n        type,\r\n      });\r\n\r\n      mutate({\r\n        ...data,\r\n        ...update_Project_by_pk,\r\n      });\r\n      router.push(`/Project/List`);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const addproject = () => {\r\n    const pathname = `/Project/List`;\r\n    location.replace(pathname);\r\n  };\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        <div class=\"profile-content\">test</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}