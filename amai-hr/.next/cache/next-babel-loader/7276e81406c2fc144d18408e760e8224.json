{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport Layout from \"../Components/Layout\";\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\nconst GetCategoryIds = gql`\n  {\n    Candidate {\n      id\n      Email\n      Last_Name\n      Name\n      domain\n      phone_number\n      Status\n    }\n  }\n`;\nconst GetCategoryById = gql`\n  query GetCategoryById($id: Int!) {\n    Candidate_by_pk(id: $id) {\n      id\n      Email\n      Last_Name\n      Name\n      domain\n      phone_number\n      Status\n    }\n  }\n`;\nexport const getStaticPaths = async () => {\n  const hasura = hasuraUserClient();\n  const {\n    Candidate\n  } = await hasura.request(GetCategoryIds);\n  return {\n    paths: Candidate.map(({\n      id\n    }) => ({\n      params: {\n        id: id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const hasura = hasuraUserClient();\n  const {\n    id\n  } = params;\n  console.log(params);\n  console.log(id);\n  const initialData = await hasura.request(GetCategoryById, {\n    id\n  });\n  return {\n    props: {\n      initialData\n    },\n    revalidate: 1\n  };\n};\nconst UpdatePost = gql`\n  mutation update_Candidate_by_pk(\n    $id: Int!\n    $Email: String!\n    $Last_Name: String!\n    $Name: String!\n    $domain: String!\n    $phone_number: String!\n  ) {\n    update_Candidate_by_pk(\n      pk_columns: { id: $id }\n      _set: {\n        Email: $Email\n        Last_Name: $Last_Name\n        Name: $Name\n        domain: $domain\n        phone_number: $phone_number\n      }\n    ) {\n      Email\n      Last_Name\n      Name\n      domain\n      id\n      phone_number\n      Status\n    }\n  }\n`;\nexport default function CategoryPage({\n  initialData\n}) {\n  const hasura = hasuraUserClient();\n  const {\n    query\n  } = useRouter();\n  const router = useRouter();\n  const {\n    id\n  } = query;\n\n  const _useForm = useForm(),\n        {\n    handleSubmit,\n    register,\n    control,\n    errors,\n    formState: {\n      isSubmitting\n    }\n  } = _useForm,\n        defaultValues = Object.assign({}, _useForm.defaultValues);\n\n  const {\n    data,\n    mutate\n  } = useSWR([GetCategoryById, id], (query, id) => hasura.request(query, {\n    id\n  }), {\n    initialData,\n    revalidateOnMount: true\n  });\n\n  const onSubmit = async ({\n    id,\n    Email,\n    Last_Name,\n    Name,\n    domain,\n    phone_number\n  }) => {\n    try {\n      const id = data.Candidate_by_pk.id;\n      console.log(id);\n      const {\n        update_Candidate_by_pk\n      } = await hasura.request(UpdatePost, {\n        id,\n        Email,\n        Last_Name,\n        Name,\n        domain,\n        phone_number\n      });\n      mutate(_objectSpread(_objectSpread({}, data), update_Candidate_by_pk));\n      router.push(`/CandidatList`);\n    } catch (err) {\n      console.log(err);\n    }\n\n    useEffect(() => {\n      reset(defaultValues); // asynchronously reset your form values\n    }, [reset, defaultValues]);\n  };\n\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"page-content-wrapper\"\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    }\n  }, __jsx(\"div\", {\n    class: \"profile-content\"\n  }, __jsx(\"div\", {\n    class: \"row\"\n  }, __jsx(\"div\", {\n    class: \"col-md-12\"\n  }, __jsx(\"div\", {\n    class: \"portlet light \"\n  }, __jsx(\"div\", {\n    class: \"portlet-body\"\n  }, __jsx(\"div\", {\n    class: \"tab-content\"\n  }, __jsx(\"div\", {\n    class: \"tab-pane active\",\n    id: \"tab_1_1\"\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"First Name\"), __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.Name,\n    name: \"Name\",\n    id: \"Name\",\n    type: \"text\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Last Name\"), __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.Last_Name,\n    name: \"Last_Name\",\n    id: \"Last_Name\",\n    type: \"text\",\n    placeholder: \"Last Name\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Mobile Number\"), __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.phone_number,\n    name: \"phone_number\",\n    id: \"phone_number\",\n    type: \"text\",\n    placeholder: \"+1 646 580 DEMO (6284)\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Email\"), __jsx(\"input\", {\n    name: \"Email\",\n    id: \"Email\",\n    type: \"email\",\n    defaultValue: data.Candidate_by_pk.Email,\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"form-group\"\n  }, __jsx(\"label\", {\n    class: \"control-label\"\n  }, \"Domain\"), __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.domain,\n    name: \"domain\",\n    id: \"domain\",\n    type: \"text\",\n    placeholder: \"Web Developer\",\n    class: \"form-control\",\n    ref: register({\n      required: \"You must select a category for your thread\"\n    })\n  }), \" \"), __jsx(\"div\", {\n    class: \"margiv-top-10\"\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    class: \"btn green\",\n    disabled: isSubmitting\n  }, \" \", \"Save Changes\", \" \"), __jsx(\"a\", {\n    href: \"#\",\n    class: \"btn default\"\n  }, \" \", \"Cancel\", \" \"))))))))))), \" \"));\n}","map":null,"metadata":{},"sourceType":"module"}