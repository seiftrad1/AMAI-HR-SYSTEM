{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\AMAI HR\\\\amai-hr\\\\lib\\\\auth.js\";\nimport React, { useState, useContext, createContext } from \"react\";\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, gql } from \"@apollo/client\";\nconst authContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  const auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: auth.createApolloClient(),\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nfunction useProvideAuth() {\n  const {\n    0: authToken,\n    1: setAuthToken\n  } = useState(null);\n\n  const getAuthHeaders = () => {\n    if (!authToken) return null;\n    return {\n      authorization: `Bearer ${authToken}`\n    };\n  };\n\n  function createApolloClient() {\n    const link = new HttpLink({\n      uri: \"https://immortal-monkfish-39.hasura.app/v1/graphql\",\n      headers: getAuthHeaders()\n    });\n    return new ApolloClient({\n      link,\n      cache: new InMemoryCache()\n    });\n  }\n\n  const signOut = () => {\n    setAuthToken(null);\n  };\n\n  const signIn = async ({\n    username,\n    password\n  }) => {\n    var _result$data, _result$data$login;\n\n    const client = createApolloClient();\n    const LoginMutation = gql`\n      mutation LoginMutation($username: String!, $password: String!) {\n        login(username: $username, password: $password) {\n          token\n        }\n      }\n    `;\n    const result = await client.mutate({\n      mutation: LoginMutation,\n      variables: {\n        username,\n        password\n      }\n    });\n    console.log(result);\n\n    if (result !== null && result !== void 0 && (_result$data = result.data) !== null && _result$data !== void 0 && (_result$data$login = _result$data.login) !== null && _result$data$login !== void 0 && _result$data$login.token) {\n      setAuthToken(result.data.login.token);\n    }\n  };\n\n  const isSignedIn = () => {\n    if (authToken) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return {\n    createApolloClient,\n    signIn,\n    signOut,\n    isSignedIn\n  };\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/AMAI HR/amai-hr/lib/auth.js"],"names":["React","useState","useContext","createContext","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","gql","authContext","AuthProvider","children","auth","useProvideAuth","createApolloClient","useAuth","authToken","setAuthToken","getAuthHeaders","authorization","link","uri","headers","cache","signOut","signIn","username","password","client","LoginMutation","result","mutate","mutation","variables","console","log","data","login","token","isSignedIn"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,aAAtC,QAA2D,OAA3D;AACA,SACEC,cADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,QAJF,EAKEC,GALF,QAMO,gBANP;AAQA,MAAMC,WAAW,gBAAGN,aAAa,EAAjC;AAEA,OAAO,SAASO,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAMC,IAAI,GAAGC,cAAc,EAA3B;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAED,IAA7B;AAAA,2BACE,QAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,IAAI,CAACE,kBAAL,EAAxB;AAAA,gBACGH;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;AAED,OAAO,MAAMI,OAAO,GAAG,MAAM;AAC3B,SAAOb,UAAU,CAACO,WAAD,CAAjB;AACD,CAFM;;AAIP,SAASI,cAAT,GAA0B;AACxB,QAAM;AAAA,OAACG,SAAD;AAAA,OAAYC;AAAZ,MAA4BhB,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMiB,cAAc,GAAG,MAAM;AAC3B,QAAI,CAACF,SAAL,EAAgB,OAAO,IAAP;AAEhB,WAAO;AACLG,MAAAA,aAAa,EAAG,UAASH,SAAU;AAD9B,KAAP;AAGD,GAND;;AAQA,WAASF,kBAAT,GAA8B;AAC5B,UAAMM,IAAI,GAAG,IAAIb,QAAJ,CAAa;AACxBc,MAAAA,GAAG,EAAE,oDADmB;AAExBC,MAAAA,OAAO,EAAEJ,cAAc;AAFC,KAAb,CAAb;AAKA,WAAO,IAAIb,YAAJ,CAAiB;AACtBe,MAAAA,IADsB;AAEtBG,MAAAA,KAAK,EAAE,IAAIjB,aAAJ;AAFe,KAAjB,CAAP;AAID;;AAED,QAAMkB,OAAO,GAAG,MAAM;AACpBP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMQ,MAAM,GAAG,OAAO;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAP,KAAkC;AAAA;;AAC/C,UAAMC,MAAM,GAAGd,kBAAkB,EAAjC;AACA,UAAMe,aAAa,GAAGrB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,KANI;AAOA,UAAMsB,MAAM,GAAG,MAAMF,MAAM,CAACG,MAAP,CAAc;AACjCC,MAAAA,QAAQ,EAAEH,aADuB;AAEjCI,MAAAA,SAAS,EAAE;AAAEP,QAAAA,QAAF;AAAYC,QAAAA;AAAZ;AAFsB,KAAd,CAArB;AAKAO,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;;AAEA,QAAIA,MAAJ,aAAIA,MAAJ,+BAAIA,MAAM,CAAEM,IAAZ,+DAAI,aAAcC,KAAlB,+CAAI,mBAAqBC,KAAzB,EAAgC;AAC9BrB,MAAAA,YAAY,CAACa,MAAM,CAACM,IAAP,CAAYC,KAAZ,CAAkBC,KAAnB,CAAZ;AACD;AACF,GAnBD;;AAqBA,QAAMC,UAAU,GAAG,MAAM;AACvB,QAAIvB,SAAJ,EAAe;AACb,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAP;AACD;AACF,GAND;;AAQA,SAAO;AACLF,IAAAA,kBADK;AAELW,IAAAA,MAFK;AAGLD,IAAAA,OAHK;AAILe,IAAAA;AAJK,GAAP;AAMD","sourcesContent":["import React, { useState, useContext, createContext } from \"react\";\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  HttpLink,\r\n  gql,\r\n} from \"@apollo/client\";\r\n\r\nconst authContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const auth = useProvideAuth();\r\n\r\n  return (\r\n    <authContext.Provider value={auth}>\r\n      <ApolloProvider client={auth.createApolloClient()}>\r\n        {children}\r\n      </ApolloProvider>\r\n    </authContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\nfunction useProvideAuth() {\r\n  const [authToken, setAuthToken] = useState(null);\r\n\r\n  const getAuthHeaders = () => {\r\n    if (!authToken) return null;\r\n\r\n    return {\r\n      authorization: `Bearer ${authToken}`,\r\n    };\r\n  };\r\n\r\n  function createApolloClient() {\r\n    const link = new HttpLink({\r\n      uri: \"https://immortal-monkfish-39.hasura.app/v1/graphql\",\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    return new ApolloClient({\r\n      link,\r\n      cache: new InMemoryCache(),\r\n    });\r\n  }\r\n\r\n  const signOut = () => {\r\n    setAuthToken(null);\r\n  };\r\n\r\n  const signIn = async ({ username, password }) => {\r\n    const client = createApolloClient();\r\n    const LoginMutation = gql`\r\n      mutation LoginMutation($username: String!, $password: String!) {\r\n        login(username: $username, password: $password) {\r\n          token\r\n        }\r\n      }\r\n    `;\r\n    const result = await client.mutate({\r\n      mutation: LoginMutation,\r\n      variables: { username, password },\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    if (result?.data?.login?.token) {\r\n      setAuthToken(result.data.login.token);\r\n    }\r\n  };\r\n\r\n  const isSignedIn = () => {\r\n    if (authToken) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    createApolloClient,\r\n    signIn,\r\n    signOut,\r\n    isSignedIn,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}