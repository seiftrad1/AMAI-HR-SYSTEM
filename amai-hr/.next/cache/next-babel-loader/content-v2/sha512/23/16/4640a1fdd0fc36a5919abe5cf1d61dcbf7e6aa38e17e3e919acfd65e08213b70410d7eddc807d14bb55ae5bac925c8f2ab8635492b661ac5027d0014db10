{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/msdtt/OneDrive/Documents/AMAI HR/amai-hr/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"C:/Users/msdtt/OneDrive/Documents/AMAI HR/amai-hr/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"C:/Users/msdtt/OneDrive/Documents/AMAI HR/amai-hr/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\AMAI HR\\\\amai-hr\\\\lib\\\\auth.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      mutation LoginMutation($username: String!, $password: String!) {\\n        login(username: $username, password: $password) {\\n          token\\n        }\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useContext, createContext } from \"react\";\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, gql } from \"@apollo/client\";\nvar authContext = /*#__PURE__*/createContext();\nexport function AuthProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var auth = useProvideAuth();\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: auth,\n    children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: auth.createApolloClient(),\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AuthProvider, \"XNU4Jn8u4aVzJknlKOHFJq03xMo=\", false, function () {\n  return [useProvideAuth];\n});\n\n_c = AuthProvider;\nexport var useAuth = function useAuth() {\n  _s2();\n\n  return useContext(authContext);\n};\n\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nfunction useProvideAuth() {\n  _s3();\n\n  var _useState = useState(null),\n      authToken = _useState[0],\n      setAuthToken = _useState[1];\n\n  var getAuthHeaders = function getAuthHeaders() {\n    if (!authToken) return null;\n    return {\n      authorization: \"Bearer \".concat(authToken)\n    };\n  };\n\n  function createApolloClient() {\n    var link = new HttpLink({\n      uri: \"https://immortal-monkfish-39.hasura.app/v1/graphql\",\n      headers: getAuthHeaders()\n    });\n    return new ApolloClient({\n      link: link,\n      cache: new InMemoryCache()\n    });\n  }\n\n  var signOut = function signOut() {\n    setAuthToken(null);\n  };\n\n  var signIn = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var _result$data, _result$data$login;\n\n      var username, password, client, LoginMutation, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              username = _ref2.username, password = _ref2.password;\n              client = createApolloClient();\n              LoginMutation = gql(_templateObject());\n              _context.next = 5;\n              return client.mutate({\n                mutation: LoginMutation,\n                variables: {\n                  username: username,\n                  password: password\n                }\n              });\n\n            case 5:\n              result = _context.sent;\n              console.log(result);\n\n              if (result !== null && result !== void 0 && (_result$data = result.data) !== null && _result$data !== void 0 && (_result$data$login = _result$data.login) !== null && _result$data$login !== void 0 && _result$data$login.token) {\n                setAuthToken(result.data.login.token);\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function signIn(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var isSignedIn = function isSignedIn() {\n    if (authToken) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  return {\n    createApolloClient: createApolloClient,\n    signIn: signIn,\n    signOut: signOut,\n    isSignedIn: isSignedIn\n  };\n}\n\n_s3(useProvideAuth, \"pEEwcByep9vBmrrqNXJ5BPZy1vM=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/AMAI HR/amai-hr/lib/auth.js"],"names":["React","useState","useContext","createContext","ApolloProvider","ApolloClient","InMemoryCache","HttpLink","gql","authContext","AuthProvider","children","auth","useProvideAuth","createApolloClient","useAuth","authToken","setAuthToken","getAuthHeaders","authorization","link","uri","headers","cache","signOut","signIn","username","password","client","LoginMutation","mutate","mutation","variables","result","console","log","data","login","token","isSignedIn"],"mappings":"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","sourcesContent":["import React, { useState, useContext, createContext } from \"react\";\r\nimport {\r\n  ApolloProvider,\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  HttpLink,\r\n  gql,\r\n} from \"@apollo/client\";\r\n\r\nconst authContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const auth = useProvideAuth();\r\n\r\n  return (\r\n    <authContext.Provider value={auth}>\r\n      <ApolloProvider client={auth.createApolloClient()}>\r\n        {children}\r\n      </ApolloProvider>\r\n    </authContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useAuth = () => {\r\n  return useContext(authContext);\r\n};\r\n\r\nfunction useProvideAuth() {\r\n  const [authToken, setAuthToken] = useState(null);\r\n\r\n  const getAuthHeaders = () => {\r\n    if (!authToken) return null;\r\n\r\n    return {\r\n      authorization: `Bearer ${authToken}`,\r\n    };\r\n  };\r\n\r\n  function createApolloClient() {\r\n    const link = new HttpLink({\r\n      uri: \"https://immortal-monkfish-39.hasura.app/v1/graphql\",\r\n      headers: getAuthHeaders(),\r\n    });\r\n\r\n    return new ApolloClient({\r\n      link,\r\n      cache: new InMemoryCache(),\r\n    });\r\n  }\r\n\r\n  const signOut = () => {\r\n    setAuthToken(null);\r\n  };\r\n\r\n  const signIn = async ({ username, password }) => {\r\n    const client = createApolloClient();\r\n    const LoginMutation = gql`\r\n      mutation LoginMutation($username: String!, $password: String!) {\r\n        login(username: $username, password: $password) {\r\n          token\r\n        }\r\n      }\r\n    `;\r\n    const result = await client.mutate({\r\n      mutation: LoginMutation,\r\n      variables: { username, password },\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    if (result?.data?.login?.token) {\r\n      setAuthToken(result.data.login.token);\r\n    }\r\n  };\r\n\r\n  const isSignedIn = () => {\r\n    if (authToken) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    createApolloClient,\r\n    signIn,\r\n    signOut,\r\n    isSignedIn,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}