{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nconst GetUserByEmail = gql`\n  query GetUserByEmail($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n      Name\n      email\n      password\n      last_seen\n      Avatar\n      Role\n      notifications_aggregate(where: { seen: { _eq: false } }) {\n        aggregate {\n          count\n        }\n      }\n      notifications(where: { seen: { _eq: false } }) {\n        id\n        description\n      }\n    }\n  }\n`;\nconst getNotifications = gql`\n  query MyQuery {\n    notification(where: { user_id: { _is_null: true } }) {\n      description\n      name\n      seen\n    }\n    notification_aggregate(where: { user_id: { _is_null: true } }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nexport default (async (req, res) => {\n  const {\n    email,\n    password: rawPassword\n  } = req.body;\n  const {\n    User: [foundUser]\n  } = await hasuraAdminClient.request(GetUserByEmail, {\n    email\n  }, await hasuraAdminClient.request(getNotifications));\n  if (!foundUser) return res.status(401).json({\n    message: \"Invalid email/password.\"\n  });\n\n  const {\n    password\n  } = foundUser,\n        user = _objectWithoutProperties(foundUser, [\"password\"]);\n\n  const passwordsMatch = await bcrypt.compare(rawPassword, password);\n  if (!passwordsMatch) return res.status(401).json({\n    message: \"Invalid email/password.\"\n  });\n  const token = jwt.sign({\n    \"https://hasura.io/jwt/claims\": {\n      \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\n      \"x-hasura-default-role\": \"user\",\n      \"x-hasura-user-id\": user.id\n    }\n  }, \"7675F456A49B42FEC8DB59B3A51A172E57E95B3BF7765CACD1F56D2CD1\", {\n    subject: user.Name\n  });\n  res.status(200).json(_objectSpread({\n    token\n  }, user));\n});","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/api/login.js"],"names":["jwt","bcrypt","hasuraAdminClient","gql","GetUserByEmail","getNotifications","req","res","email","password","rawPassword","body","User","foundUser","request","status","json","message","user","passwordsMatch","compare","token","sign","id","subject","Name"],"mappings":";;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SAASC,iBAAT,EAA4BC,GAA5B,QAAuC,+BAAvC;AAEA,MAAMC,cAAc,GAAGD,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBA;AAsBA,MAAME,gBAAgB,GAAGF,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;AAeA,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAQ,EAAEC;AAAnB,MAAmCJ,GAAG,CAACK,IAA7C;AAEA,QAAM;AACJC,IAAAA,IAAI,EAAE,CAACC,SAAD;AADF,MAEF,MAAMX,iBAAiB,CAACY,OAAlB,CACRV,cADQ,EAER;AACEI,IAAAA;AADF,GAFQ,EAKR,MAAMN,iBAAiB,CAACY,OAAlB,CAA0BT,gBAA1B,CALE,CAFV;AASA,MAAI,CAACQ,SAAL,EACE,OAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,IAAAA,OAAO,EAAE;AADiB,GAArB,CAAP;;AAIF,QAAM;AAAER,IAAAA;AAAF,MAAwBI,SAA9B;AAAA,QAAqBK,IAArB,4BAA8BL,SAA9B;;AAEA,QAAMM,cAAc,GAAG,MAAMlB,MAAM,CAACmB,OAAP,CAAeV,WAAf,EAA4BD,QAA5B,CAA7B;AAEA,MAAI,CAACU,cAAL,EACE,OAAOZ,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,IAAAA,OAAO,EAAE;AADiB,GAArB,CAAP;AAIF,QAAMI,KAAK,GAAGrB,GAAG,CAACsB,IAAJ,CACZ;AACE,oCAAgC;AAC9B,gCAA0B,CAAC,OAAD,EAAU,MAAV,CADI;AAE9B,+BAAyB,MAFK;AAG9B,0BAAoBJ,IAAI,CAACK;AAHK;AADlC,GADY,EAQZ,4DARY,EASZ;AACEC,IAAAA,OAAO,EAAEN,IAAI,CAACO;AADhB,GATY,CAAd;AAcAlB,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AAAuBK,IAAAA;AAAvB,KAAiCH,IAAjC;AACD,CAzCD","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\r\n\r\nconst GetUserByEmail = gql`\r\n  query GetUserByEmail($email: String!) {\r\n    User(where: { email: { _eq: $email } }) {\r\n      id\r\n      Name\r\n      email\r\n      password\r\n      last_seen\r\n      Avatar\r\n      Role\r\n      notifications_aggregate(where: { seen: { _eq: false } }) {\r\n        aggregate {\r\n          count\r\n        }\r\n      }\r\n      notifications(where: { seen: { _eq: false } }) {\r\n        id\r\n        description\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getNotifications = gql`\r\n  query MyQuery {\r\n    notification(where: { user_id: { _is_null: true } }) {\r\n      description\r\n      name\r\n      seen\r\n    }\r\n    notification_aggregate(where: { user_id: { _is_null: true } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default async (req, res) => {\r\n  const { email, password: rawPassword } = req.body;\r\n\r\n  const {\r\n    User: [foundUser],\r\n  } = await hasuraAdminClient.request(\r\n    GetUserByEmail,\r\n    {\r\n      email,\r\n    },\r\n    await hasuraAdminClient.request(getNotifications)\r\n  );\r\n  if (!foundUser)\r\n    return res.status(401).json({\r\n      message: \"Invalid email/password.\",\r\n    });\r\n\r\n  const { password, ...user } = foundUser;\r\n\r\n  const passwordsMatch = await bcrypt.compare(rawPassword, password);\r\n\r\n  if (!passwordsMatch)\r\n    return res.status(401).json({\r\n      message: \"Invalid email/password.\",\r\n    });\r\n\r\n  const token = jwt.sign(\r\n    {\r\n      \"https://hasura.io/jwt/claims\": {\r\n        \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\r\n        \"x-hasura-default-role\": \"user\",\r\n        \"x-hasura-user-id\": user.id,\r\n      },\r\n    },\r\n    \"7675F456A49B42FEC8DB59B3A51A172E57E95B3BF7765CACD1F56D2CD1\",\r\n    {\r\n      subject: user.Name,\r\n    }\r\n  );\r\n\r\n  res.status(200).json({ token, ...user });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}