{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _templateObject2,\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\nvar UpdateUserLastSeen = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  mutation UpdateUserLastSeen($id: Int!, $now: timestamptz!, $url: String) {\\n    update_User(\\n      where: { id: { _eq: $id } }\\n      _set: { last_seen: $now, last_seen_url: $url }\\n    ) {\\n      returning {\\n        last_seen\\n        last_seen_url\\n      }\\n    }\\n  }\\n\"])));\nexport default function LastSeen(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var router = useRouter();\n\n  var _useAuthState = useAuthState(),\n      isAuthenticated = _useAuthState.isAuthenticated,\n      user = _useAuthState.user,\n      save_last_seen = _useAuthState.save_last_seen;\n\n  var _useAuthDispatch = useAuthDispatch(),\n      updateUser = _useAuthDispatch.updateUser;\n\n  var GetUserById = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    query GetUserById($user_id: Int!) {\\n      User_by_pk(id: $user_id) {\\n        id\\n        notifications_aggregate(where: { seen: { _eq: false } }) {\\n          aggregate {\\n            count\\n          }\\n        }\\n        notifications(where: { seen: { _eq: false } }) {\\n          id\\n          description\\n        }\\n      }\\n    }\\n  \"])));\n  useEffect(function () {\n    if (!isAuthenticated || !save_last_seen) return;\n    updateLastSeen(router.pathname);\n    router.events.on(\"routeChangeComplete\", updateLastSeen);\n    return function () {\n      return router.events.off(\"routeChangeComplete\", updateLastSeen);\n    };\n  }, [isAuthenticated, save_last_seen]);\n\n  var updateLastSeen = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n      var hasura, _yield$hasura$request, User_by_pk;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              hasura = hasuraUserClient();\n              _context.next = 3;\n              return hasura.request(UpdateUserLastSeen, {\n                id: user.id,\n                now: new Date().toISOString(),\n                url: url\n              });\n\n            case 3:\n              _context.next = 5;\n              return hasura.request(GetUserById, {\n                user_id: user.id\n              });\n\n            case 5:\n              _yield$hasura$request = _context.sent;\n              User_by_pk = _yield$hasura$request.User_by_pk;\n              updateUser(User_by_pk);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function updateLastSeen(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return children;\n}\n\n_s(LastSeen, \"cyok/XyCRdLZWkstIvkcgwZLDfg=\", false, function () {\n  return [useRouter, useAuthState, useAuthDispatch];\n});\n\n_c = LastSeen;\n\nvar _c;\n\n$RefreshReg$(_c, \"LastSeen\");","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/Components/LastSeen.js"],"names":["useEffect","useRouter","useAuthState","useAuthDispatch","gql","hasuraUserClient","UpdateUserLastSeen","LastSeen","children","router","isAuthenticated","user","save_last_seen","updateUser","GetUserById","updateLastSeen","pathname","events","on","off","url","hasura","request","id","now","Date","toISOString","user_id","User_by_pk"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,oBAA9C;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,8BAAtC;AAEA,IAAMC,kBAAkB,GAAGF,GAAH,2VAAxB;AAcA,eAAe,SAASG,QAAT,OAAgC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;AAC7C,MAAMC,MAAM,GAAGR,SAAS,EAAxB;;AACA,sBAAkDC,YAAY,EAA9D;AAAA,MAAQQ,eAAR,iBAAQA,eAAR;AAAA,MAAyBC,IAAzB,iBAAyBA,IAAzB;AAAA,MAA+BC,cAA/B,iBAA+BA,cAA/B;;AACA,yBAAuBT,eAAe,EAAtC;AAAA,MAAQU,UAAR,oBAAQA,UAAR;;AACA,MAAMC,WAAW,GAAGV,GAAH,kaAAjB;AAgBAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,CAACU,eAAD,IAAoB,CAACE,cAAzB,EAAyC;AAEzCG,IAAAA,cAAc,CAACN,MAAM,CAACO,QAAR,CAAd;AAEAP,IAAAA,MAAM,CAACQ,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCH,cAAxC;AAEA,WAAO;AAAA,aAAMN,MAAM,CAACQ,MAAP,CAAcE,GAAd,CAAkB,qBAAlB,EAAyCJ,cAAzC,CAAN;AAAA,KAAP;AACD,GARQ,EAQN,CAACL,eAAD,EAAkBE,cAAlB,CARM,CAAT;;AAUA,MAAMG,cAAc;AAAA,yEAAG,iBAAOK,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfC,cAAAA,MADe,GACNhB,gBAAgB,EADV;AAAA;AAAA,qBAGfgB,MAAM,CAACC,OAAP,CAAehB,kBAAf,EAAmC;AACvCiB,gBAAAA,EAAE,EAAEZ,IAAI,CAACY,EAD8B;AAEvCC,gBAAAA,GAAG,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAFkC;AAGvCN,gBAAAA,GAAG,EAAHA;AAHuC,eAAnC,CAHe;;AAAA;AAAA;AAAA,qBAQQC,MAAM,CAACC,OAAP,CAAeR,WAAf,EAA4B;AACvDa,gBAAAA,OAAO,EAAEhB,IAAI,CAACY;AADyC,eAA5B,CARR;;AAAA;AAAA;AAQbK,cAAAA,UARa,yBAQbA,UARa;AAWrBf,cAAAA,UAAU,CAACe,UAAD,CAAV;;AAXqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdb,cAAc;AAAA;AAAA;AAAA,KAApB;;AAcA,SAAOP,QAAP;AACD;;GA7CuBD,Q;UACPN,S,EACmCC,Y,EAC3BC,e;;;KAHDI,Q","sourcesContent":["import { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\n\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\n\nconst UpdateUserLastSeen = gql`\n  mutation UpdateUserLastSeen($id: Int!, $now: timestamptz!, $url: String) {\n    update_User(\n      where: { id: { _eq: $id } }\n      _set: { last_seen: $now, last_seen_url: $url }\n    ) {\n      returning {\n        last_seen\n        last_seen_url\n      }\n    }\n  }\n`;\n\nexport default function LastSeen({ children }) {\n  const router = useRouter();\n  const { isAuthenticated, user, save_last_seen } = useAuthState();\n  const { updateUser } = useAuthDispatch();\n  const GetUserById = gql`\n    query GetUserById($user_id: Int!) {\n      User_by_pk(id: $user_id) {\n        id\n        notifications_aggregate(where: { seen: { _eq: false } }) {\n          aggregate {\n            count\n          }\n        }\n        notifications(where: { seen: { _eq: false } }) {\n          id\n          description\n        }\n      }\n    }\n  `;\n  useEffect(() => {\n    if (!isAuthenticated || !save_last_seen) return;\n\n    updateLastSeen(router.pathname);\n\n    router.events.on(\"routeChangeComplete\", updateLastSeen);\n\n    return () => router.events.off(\"routeChangeComplete\", updateLastSeen);\n  }, [isAuthenticated, save_last_seen]);\n\n  const updateLastSeen = async (url) => {\n    const hasura = hasuraUserClient();\n\n    await hasura.request(UpdateUserLastSeen, {\n      id: user.id,\n      now: new Date().toISOString(),\n      url,\n    });\n    const { User_by_pk } = await hasura.request(GetUserById, {\n      user_id: user.id,\n    });\n    updateUser(User_by_pk);\n  };\n\n  return children;\n}\n"]},"metadata":{},"sourceType":"module"}