{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\Profile\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport { useRouter } from \"next/router\";\nexport default function PrivatePage(props) {\n  const {\n    0: image,\n    1: setImage\n  } = useState(null);\n  const {\n    0: createObjectURL,\n    1: setCreateObjectURL\n  } = useState(null);\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n\n  const uploadToClient = event => {\n    if (event.target.files && event.target.files[0]) {\n      const i = event.target.files[0];\n      setImage(i);\n      setCreateObjectURL(URL.createObjectURL(i));\n    }\n  };\n\n  const uploadToServer = async event => {\n    const hasura = hasuraUserClient();\n    const body = new FormData();\n    body.append(\"file\", image);\n    const response = await fetch(\"/api/file/\", {\n      method: \"POST\",\n      body\n    });\n    const tt = await fetch(\"/api/file/\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        id\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const Avatar = image.name;\n    const UploadImage = gql`\n      mutation MyMutation($Avatar: String!, $id: Int!) {\n        update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\n          Avatar\n          Name\n        }\n      }\n    `;\n\n    try {\n      await hasura.request(UploadImage, {\n        id,\n        Avatar\n      });\n      mutate();\n    } catch (error) {\n      console.error(error);\n    }\n\n    return;\n  };\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: createObjectURL,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Select Image\"), id, __jsx(\"input\", {\n    type: \"file\",\n    name: \"myImage\",\n    onChange: uploadToClient,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    onClick: uploadToServer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Send to server\")));\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/Profile/[id].js"],"names":["useState","useRouter","PrivatePage","props","image","setImage","createObjectURL","setCreateObjectURL","router","id","query","uploadToClient","event","target","files","i","URL","uploadToServer","hasura","hasuraUserClient","body","FormData","append","response","fetch","method","tt","JSON","stringify","headers","Avatar","name","UploadImage","gql","request","mutate","error","console","minHeight"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nexport default function PrivatePage(props) {\r\n  const [image, setImage] = useState(null);\r\n  const [createObjectURL, setCreateObjectURL] = useState(null);\r\n  const router = useRouter();\r\n  const { id } = router.query;\r\n  const uploadToClient = (event) => {\r\n    if (event.target.files && event.target.files[0]) {\r\n      const i = event.target.files[0];\r\n      setImage(i);\r\n      setCreateObjectURL(URL.createObjectURL(i));\r\n    }\r\n  };\r\n\r\n  const uploadToServer = async (event) => {\r\n    const hasura = hasuraUserClient();\r\n    const body = new FormData();\r\n    body.append(\"file\", image);\r\n    const response = await fetch(\"/api/file/\", {\r\n      method: \"POST\",\r\n      body,\r\n    });\r\n    const tt = await fetch(\"/api/file/\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ id }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const Avatar = image.name;\r\n    const UploadImage = gql`\r\n      mutation MyMutation($Avatar: String!, $id: Int!) {\r\n        update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\r\n          Avatar\r\n          Name\r\n        }\r\n      }\r\n    `;\r\n    try {\r\n      await hasura.request(UploadImage, { id, Avatar });\r\n      mutate();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        <img src={createObjectURL} />\r\n        <h4>Select Image</h4>\r\n        {id}\r\n        <input type=\"file\" name=\"myImage\" onChange={uploadToClient} />\r\n        <button\r\n          className=\"btn btn-primary\"\r\n          type=\"submit\"\r\n          onClick={uploadToServer}\r\n        >\r\n          Send to server\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}