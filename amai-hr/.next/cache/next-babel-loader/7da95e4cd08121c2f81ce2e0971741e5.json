{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nconst GetUserByEmail = gql`\n  query GetUserByEmail {\n    User(where: { email: { _eq: \"msdt.trad@hotmail.com\" } }) {\n      id\n      Name\n      email\n      password\n      last_seen\n    }\n  }\n`;\nexport default (async (req, res) => {\n  const {\n    email,\n    password: rawPassword\n  } = req.body;\n  const {\n    User: [foundUser]\n  } = await hasuraAdminClient.request(GetUserByEmail, {\n    email\n  });\n  if (!foundUser) return res.status(401).json({\n    message: \"Invalid email/password.\"\n  });\n\n  const {\n    password\n  } = foundUser,\n        user = _objectWithoutProperties(foundUser, [\"password\"]);\n\n  const passwordsMatch = await bcrypt.compare(rawPassword, password);\n  if (!passwordsMatch) return res.status(401).json({\n    message: \"Invalid email/password.\"\n  });\n  const token = jwt.sign({\n    \"https://hasura.io/jwt/claims\": {\n      \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\n      \"x-hasura-default-role\": \"user\",\n      \"x-hasura-user-id\": user.id\n    }\n  }, process.env.HASURA_GRAPHQL_JWT_SECRET, {\n    subject: user.id\n  });\n  res.status(200).json(_objectSpread({\n    token\n  }, user));\n});","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/AMAI HR/amai-hr/pages/api/login.js"],"names":["jwt","bcrypt","hasuraAdminClient","gql","GetUserByEmail","req","res","email","password","rawPassword","body","User","foundUser","request","status","json","message","user","passwordsMatch","compare","token","sign","id","process","env","HASURA_GRAPHQL_JWT_SECRET","subject"],"mappings":";;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SAASC,iBAAT,EAA4BC,GAA5B,QAAuC,+BAAvC;AAEA,MAAMC,cAAc,GAAGD,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;AAYA,gBAAe,OAAOE,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAQ,EAAEC;AAAnB,MAAmCJ,GAAG,CAACK,IAA7C;AAEA,QAAM;AACJC,IAAAA,IAAI,EAAE,CAACC,SAAD;AADF,MAEF,MAAMV,iBAAiB,CAACW,OAAlB,CAA0BT,cAA1B,EAA0C;AAClDG,IAAAA;AADkD,GAA1C,CAFV;AAMA,MAAI,CAACK,SAAL,EACE,OAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,IAAAA,OAAO,EAAE;AADiB,GAArB,CAAP;;AAIF,QAAM;AAAER,IAAAA;AAAF,MAAwBI,SAA9B;AAAA,QAAqBK,IAArB,4BAA8BL,SAA9B;;AAEA,QAAMM,cAAc,GAAG,MAAMjB,MAAM,CAACkB,OAAP,CAAeV,WAAf,EAA4BD,QAA5B,CAA7B;AAEA,MAAI,CAACU,cAAL,EACE,OAAOZ,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,IAAAA,OAAO,EAAE;AADiB,GAArB,CAAP;AAIF,QAAMI,KAAK,GAAGpB,GAAG,CAACqB,IAAJ,CACZ;AACE,oCAAgC;AAC9B,gCAA0B,CAAC,OAAD,EAAU,MAAV,CADI;AAE9B,+BAAyB,MAFK;AAG9B,0BAAoBJ,IAAI,CAACK;AAHK;AADlC,GADY,EAQZC,OAAO,CAACC,GAAR,CAAYC,yBARA,EASZ;AACEC,IAAAA,OAAO,EAAET,IAAI,CAACK;AADhB,GATY,CAAd;AAcAhB,EAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;AAAuBK,IAAAA;AAAvB,KAAiCH,IAAjC;AACD,CAtCD","sourcesContent":["import jwt from \"jsonwebtoken\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\r\n\r\nconst GetUserByEmail = gql`\r\n  query GetUserByEmail {\r\n    User(where: { email: { _eq: \"msdt.trad@hotmail.com\" } }) {\r\n      id\r\n      Name\r\n      email\r\n      password\r\n      last_seen\r\n    }\r\n  }\r\n`;\r\n\r\nexport default async (req, res) => {\r\n  const { email, password: rawPassword } = req.body;\r\n\r\n  const {\r\n    User: [foundUser],\r\n  } = await hasuraAdminClient.request(GetUserByEmail, {\r\n    email,\r\n  });\r\n\r\n  if (!foundUser)\r\n    return res.status(401).json({\r\n      message: \"Invalid email/password.\",\r\n    });\r\n\r\n  const { password, ...user } = foundUser;\r\n\r\n  const passwordsMatch = await bcrypt.compare(rawPassword, password);\r\n\r\n  if (!passwordsMatch)\r\n    return res.status(401).json({\r\n      message: \"Invalid email/password.\",\r\n    });\r\n\r\n  const token = jwt.sign(\r\n    {\r\n      \"https://hasura.io/jwt/claims\": {\r\n        \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\r\n        \"x-hasura-default-role\": \"user\",\r\n        \"x-hasura-user-id\": user.id,\r\n      },\r\n    },\r\n    process.env.HASURA_GRAPHQL_JWT_SECRET,\r\n    {\r\n      subject: user.id,\r\n    }\r\n  );\r\n\r\n  res.status(200).json({ token, ...user });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}