{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\AssignTask\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport { useForm } from \"react-hook-form\";\nimport Link from \"next/link\";\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\nimport { Form } from \"react-bootstrap\";\nimport { format, parseISO } from \"date-fns\";\nconst from = new Date().toISOString();\nconst getProjectsIds = gql`\n  {\n    Project {\n      id\n      Title\n      Description\n    }\n  }\n`;\nconst GetUsers = gql`\n  query MyQuery {\n    User {\n      id\n      Name\n      Domain\n      Avatar\n    }\n  }\n`;\nconst insertmultiple = gql`\n  mutation MyMutation(\n    $Description: String!\n    $Project_id: Int!\n    $name: String!\n    $from: timestamptz!\n  ) {\n    insert_Task(\n      objects: {\n        Date: $from\n        Description: $Description\n        completed: false\n        Project_id: $Project_id\n        name: $name\n      }\n    ) {\n      affected_rows\n    }\n  }\n`;\nconst GetUsersbyproject = gql`\n  query MyQuery($id: Int!) {\n    User(\n      where: {\n        _not: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\n      }\n    ) {\n      Name\n      Avatar\n      Last_Name\n      email\n    }\n  }\n`;\nconst getTasks = gql`\n  query MyQuery($id: Int!) {\n    Task(where: { Project_id: { _eq: $id } }) {\n      id\n      Description\n      Date\n      completed\n      name\n      User {\n        Avatar\n        email\n      }\n    }\n  }\n`;\nconst GetUsersWorkingOnthisProject = gql`\n  query MyQuery($id: Int!) {\n    User(\n      where: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\n    ) {\n      id\n      Name\n      Domain\n      Avatar\n    }\n  }\n`;\nconst GetProjectByID = gql`\n  query GetProjectByID($id: Int!) {\n    Project_by_pk(id: $id) {\n      id\n      Title\n      Description\n      company_name\n      income\n    }\n  }\n`;\nconst assignu = gql`\n  mutation MyMutation($project_id: Int!, $user_id: Int!) {\n    insert_user_project_one(\n      object: { project_id: $project_id, user_id: $user_id }\n    ) {\n      project_id\n      user_id\n    }\n  }\n`;\nexport const getStaticPaths = async () => {\n  const hasura = hasuraUserClient();\n  const {\n    Project\n  } = await hasura.request(getProjectsIds);\n  return {\n    paths: Project.map(({\n      id\n    }) => ({\n      params: {\n        id: id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const hasura = hasuraUserClient();\n  const {\n    id\n  } = params;\n  const initialData = await hasura.request(GetProjectByID, {\n    id\n  });\n  const dataU = await hasura.request(GetUsers);\n  const dataz = await hasura.request(GetUsersbyproject, {\n    id\n  });\n  const dataf = await hasura.request(GetUsersWorkingOnthisProject, {\n    id\n  });\n  const tasks = await hasura.request(getTasks, {\n    id\n  });\n  return {\n    props: {\n      initialData,\n      dataU,\n      dataz,\n      dataf,\n      tasks\n    },\n    revalidate: 1\n  };\n};\nexport default function AssignTask({}) {\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, \"test\"), \" \");\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/AssignTask/[id].js"],"names":["useRouter","useSWR","useForm","Link","gql","hasuraUserClient","Form","format","parseISO","from","Date","toISOString","getProjectsIds","GetUsers","insertmultiple","GetUsersbyproject","getTasks","GetUsersWorkingOnthisProject","GetProjectByID","assignu","getStaticPaths","hasura","Project","request","paths","map","id","params","toString","fallback","getStaticProps","initialData","dataU","dataz","dataf","tasks","props","revalidate","AssignTask","minHeight"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport useSWR from \"swr\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Link from \"next/link\";\r\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { format, parseISO } from \"date-fns\";\r\n\r\nconst from = new Date().toISOString();\r\n\r\nconst getProjectsIds = gql`\r\n  {\r\n    Project {\r\n      id\r\n      Title\r\n      Description\r\n    }\r\n  }\r\n`;\r\nconst GetUsers = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n      Name\r\n      Domain\r\n      Avatar\r\n    }\r\n  }\r\n`;\r\nconst insertmultiple = gql`\r\n  mutation MyMutation(\r\n    $Description: String!\r\n    $Project_id: Int!\r\n    $name: String!\r\n    $from: timestamptz!\r\n  ) {\r\n    insert_Task(\r\n      objects: {\r\n        Date: $from\r\n        Description: $Description\r\n        completed: false\r\n        Project_id: $Project_id\r\n        name: $name\r\n      }\r\n    ) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\nconst GetUsersbyproject = gql`\r\n  query MyQuery($id: Int!) {\r\n    User(\r\n      where: {\r\n        _not: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\r\n      }\r\n    ) {\r\n      Name\r\n      Avatar\r\n      Last_Name\r\n      email\r\n    }\r\n  }\r\n`;\r\nconst getTasks = gql`\r\n  query MyQuery($id: Int!) {\r\n    Task(where: { Project_id: { _eq: $id } }) {\r\n      id\r\n      Description\r\n      Date\r\n      completed\r\n      name\r\n      User {\r\n        Avatar\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GetUsersWorkingOnthisProject = gql`\r\n  query MyQuery($id: Int!) {\r\n    User(\r\n      where: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\r\n    ) {\r\n      id\r\n      Name\r\n      Domain\r\n      Avatar\r\n    }\r\n  }\r\n`;\r\nconst GetProjectByID = gql`\r\n  query GetProjectByID($id: Int!) {\r\n    Project_by_pk(id: $id) {\r\n      id\r\n      Title\r\n      Description\r\n      company_name\r\n      income\r\n    }\r\n  }\r\n`;\r\nconst assignu = gql`\r\n  mutation MyMutation($project_id: Int!, $user_id: Int!) {\r\n    insert_user_project_one(\r\n      object: { project_id: $project_id, user_id: $user_id }\r\n    ) {\r\n      project_id\r\n      user_id\r\n    }\r\n  }\r\n`;\r\nexport const getStaticPaths = async () => {\r\n  const hasura = hasuraUserClient();\r\n\r\n  const { Project } = await hasura.request(getProjectsIds);\r\n\r\n  return {\r\n    paths: Project.map(({ id }) => ({\r\n      params: {\r\n        id: id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n};\r\n\r\nexport const getStaticProps = async ({ params }) => {\r\n  const hasura = hasuraUserClient();\r\n  const { id } = params;\r\n\r\n  const initialData = await hasura.request(GetProjectByID, { id });\r\n  const dataU = await hasura.request(GetUsers);\r\n  const dataz = await hasura.request(GetUsersbyproject, { id });\r\n  const dataf = await hasura.request(GetUsersWorkingOnthisProject, { id });\r\n  const tasks = await hasura.request(getTasks, { id });\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n      dataU,\r\n      dataz,\r\n      dataf,\r\n      tasks,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\nexport default function AssignTask({}) {\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        test\r\n      </div>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}