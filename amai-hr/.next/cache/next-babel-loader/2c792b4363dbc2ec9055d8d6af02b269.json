{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nconst GetUserByEmail = gql`\n  query GetUserByEmail($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n    }\n  }\n`;\nconst InsertUser = gql`\n  mutation InsertUser(\n    $name: String!\n    $last_name: String!\n    $email: String!\n    $domain: String!\n    $phone_number: String!\n    $password: String!\n    $created_at: timestamptz!\n    $File: String = \"\"\n    $manager_id: Int!\n  ) {\n    insert_User_one(\n      object: {\n        Name: $name\n        Last_Name: $last_name\n        email: $email\n        Domain: $domain\n        Phone_Number: $phone_number\n        password: $password\n        created_at: $created_at\n        Role: \"Employee\"\n        status: true\n        File: $File\n        manager_id: $manager_id\n      }\n    ) {\n      id\n      Name\n      Last_Name\n      email\n      Domain\n      Phone_Number\n      last_seen\n      created_at\n      Role\n      File\n      manager_id\n    }\n  }\n`;\nconst InsertUserWithoutManager = gql`\n  mutation InsertUser(\n    $name: String!\n    $last_name: String!\n    $email: String!\n    $domain: String!\n    $phone_number: String!\n    $password: String!\n    $created_at: timestamptz!\n    $File: String = \"\"\n  ) {\n    insert_User_one(\n      object: {\n        Name: $name\n        Last_Name: $last_name\n        email: $email\n        Domain: $domain\n        Phone_Number: $phone_number\n        password: $password\n        created_at: $created_at\n        Role: \"Manager\"\n        status: true\n        File: $File\n      }\n    ) {\n      id\n      Name\n      Last_Name\n      email\n      Domain\n      Phone_Number\n      last_seen\n      created_at\n      Role\n      File\n    }\n  }\n`;\nexport default (async (req, res) => {\n  const {\n    name,\n    last_name,\n    email,\n    domain,\n    phone_number,\n    created_at,\n    File,\n    Role,\n    manager_id,\n    password: rawPassword\n  } = req.body;\n  const {\n    User: [foundUser]\n  } = await hasuraAdminClient.request(GetUserByEmail, {\n    email\n  });\n  if (foundUser) return res.status(401).json({\n    message: \"Email already exist , try another\"\n  });\n  const salt = await bcrypt.genSalt();\n  const password = await bcrypt.hash(rawPassword, salt);\n\n  if (Role = \"Manager\") {\n    const {\n      insert_User_one\n    } = await hasuraAdminClient.request(InsertUserWithoutManager, {\n      name,\n      last_name,\n      email,\n      domain,\n      phone_number,\n      password,\n      created_at,\n      File\n    });\n  } else {\n    const {\n      insert_User_one\n    } = await hasuraAdminClient.request(InsertUser, {\n      name,\n      last_name,\n      email,\n      domain,\n      phone_number,\n      password,\n      created_at,\n      File,\n      manager_id\n    });\n  }\n\n  const token = jwt.sign({\n    \"https://hasura.io/jwt/claims\": {\n      \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\n      \"x-hasura-default-role\": \"user\",\n      \"x-hasura-user-id\": insert_User_one.id\n    }\n  }, \"7675F456A49B42FEC8DB59B3A51A172E57E95B3BF7765CACD1F56D2CD1\", {\n    subject: insert_User_one.Name\n  });\n  res.status(201).json(_objectSpread({\n    token\n  }, insert_User_one));\n});","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/api/register.js"],"names":["jwt","bcrypt","hasuraAdminClient","gql","GetUserByEmail","InsertUser","InsertUserWithoutManager","req","res","name","last_name","email","domain","phone_number","created_at","File","Role","manager_id","password","rawPassword","body","User","foundUser","request","status","json","message","salt","genSalt","hash","insert_User_one","token","sign","id","subject","Name"],"mappings":"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","sourcesContent":["import jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\n\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nconst GetUserByEmail = gql`\n  query GetUserByEmail($email: String!) {\n    User(where: { email: { _eq: $email } }) {\n      id\n    }\n  }\n`;\n\nconst InsertUser = gql`\n  mutation InsertUser(\n    $name: String!\n    $last_name: String!\n    $email: String!\n    $domain: String!\n    $phone_number: String!\n    $password: String!\n    $created_at: timestamptz!\n    $File: String = \"\"\n    $manager_id: Int!\n  ) {\n    insert_User_one(\n      object: {\n        Name: $name\n        Last_Name: $last_name\n        email: $email\n        Domain: $domain\n        Phone_Number: $phone_number\n        password: $password\n        created_at: $created_at\n        Role: \"Employee\"\n        status: true\n        File: $File\n        manager_id: $manager_id\n      }\n    ) {\n      id\n      Name\n      Last_Name\n      email\n      Domain\n      Phone_Number\n      last_seen\n      created_at\n      Role\n      File\n      manager_id\n    }\n  }\n`;\nconst InsertUserWithoutManager = gql`\n  mutation InsertUser(\n    $name: String!\n    $last_name: String!\n    $email: String!\n    $domain: String!\n    $phone_number: String!\n    $password: String!\n    $created_at: timestamptz!\n    $File: String = \"\"\n  ) {\n    insert_User_one(\n      object: {\n        Name: $name\n        Last_Name: $last_name\n        email: $email\n        Domain: $domain\n        Phone_Number: $phone_number\n        password: $password\n        created_at: $created_at\n        Role: \"Manager\"\n        status: true\n        File: $File\n      }\n    ) {\n      id\n      Name\n      Last_Name\n      email\n      Domain\n      Phone_Number\n      last_seen\n      created_at\n      Role\n      File\n    }\n  }\n`;\nexport default async (req, res) => {\n  const {\n    name,\n    last_name,\n    email,\n    domain,\n    phone_number,\n    created_at,\n    File,\n    Role,\n    manager_id,\n    password: rawPassword,\n  } = req.body;\n\n  const {\n    User: [foundUser],\n  } = await hasuraAdminClient.request(GetUserByEmail, {\n    email,\n  });\n\n  if (foundUser)\n    return res.status(401).json({\n      message: \"Email already exist , try another\",\n    });\n\n  const salt = await bcrypt.genSalt();\n  const password = await bcrypt.hash(rawPassword, salt);\n  if ((Role = \"Manager\")) {\n    const { insert_User_one } = await hasuraAdminClient.request(\n      InsertUserWithoutManager,\n      {\n        name,\n        last_name,\n        email,\n        domain,\n        phone_number,\n        password,\n        created_at,\n        File,\n      }\n    );\n  } else {\n    const { insert_User_one } = await hasuraAdminClient.request(InsertUser, {\n      name,\n      last_name,\n      email,\n      domain,\n      phone_number,\n      password,\n      created_at,\n      File,\n      manager_id,\n    });\n  }\n\n  const token = jwt.sign(\n    {\n      \"https://hasura.io/jwt/claims\": {\n        \"x-hasura-allowed-roles\": [\"guest\", \"user\"],\n        \"x-hasura-default-role\": \"user\",\n        \"x-hasura-user-id\": insert_User_one.id,\n      },\n    },\n    \"7675F456A49B42FEC8DB59B3A51A172E57E95B3BF7765CACD1F56D2CD1\",\n    {\n      subject: insert_User_one.Name,\n    }\n  );\n\n  res.status(201).json({ token, ...insert_User_one });\n};\n"]},"metadata":{},"sourceType":"module"}