{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _templateObject2,\n    _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\UpdateTodo\\\\[id].js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR, { mutate } from \"swr\";\nimport formatRelative from \"date-fns/formatRelative\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\nimport Link from \"next/link\";\nimport Layout from \"../Components/Layout\";\nimport gql from \"graphql-tag\";\nimport { useRouter } from \"next/router\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nvar GetCandidats = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query MyQuery($id: Int!) {\\n    Todo(where: { user_id: { _eq: $id } }) {\\n      Name\\n      user_id\\n      Description\\n    }\\n  }\\n\"])));\nvar UpdateCompleted = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  mutation MyMutation($id: Int!) {\\n    update_Todo_by_pk(pk_columns: { id: $id }, _set: { Completed: true }) {\\n      Completed\\n    }\\n  }\\n\"])));\nexport var __N_SSG = true;\nexport default function TodoList(_ref) {\n  _s();\n\n  var _this = this;\n\n  var initialData = _ref.initialData;\n  var hasura = hasuraUserClient();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var id = query.id;\n\n  var _useSWR = useSWR([GetCandidats, id], function (query, id) {\n    return hasura.request(query);\n  }, {\n    initialData: initialData,\n    revalidateOnMount: true\n  }),\n      data = _useSWR.data;\n\n  var Complete = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      var _yield$hasura$request, update_Todo_by_pk;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return hasura.request(UpdateCompleted, {\n                id: id\n              });\n\n            case 3:\n              _yield$hasura$request = _context.sent;\n              update_Todo_by_pk = _yield$hasura$request.update_Todo_by_pk;\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    return function Complete(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, \" \", __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    \"class\": \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    \"class\": \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    \"class\": \"card card-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    \"class\": \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, __jsx(\"ul\", {\n    \"class\": \"nav nav-pills todo-nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, __jsx(\"li\", {\n    role: \"presentation\",\n    \"class\": \"nav-item all-task active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    \"class\": \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"All\")), __jsx(\"li\", {\n    role: \"presentation\",\n    \"class\": \"nav-item active-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    \"class\": \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, \"Active\")), __jsx(\"li\", {\n    role: \"presentation\",\n    \"class\": \"nav-item completed-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    \"class\": \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"Completed\"))), \" \", data.Todo.map(function (_ref3) {\n    var Description = _ref3.Description,\n        Name = _ref3.Name;\n    return __jsx(\"div\", {\n      key: id,\n      \"class\": \"todo-list\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      \"class\": \"todo-item\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 23\n      }\n    }, __jsx(\"div\", {\n      \"class\": \"checker\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }\n    }, __jsx(\"span\", {\n      \"class\": \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 27\n      }\n    }, __jsx(\"input\", {\n      name: \"Completed\",\n      type: \"checkbox\",\n      onChange: Complete(id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }\n    }))), __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }\n    }, Name, \": \", Description), __jsx(\"a\", {\n      href: \"javascript:void(0);\",\n      \"class\": \"float-right remove-todo-item\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, __jsx(\"i\", {\n      \"class\": \"icon-close\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 27\n      }\n    }))));\n  }), \" \"))))));\n}\n\n_s(TodoList, \"TmwgCuja5LwZZXl+jE5TYkduBx0=\", false, function () {\n  return [useRouter, useSWR];\n});\n\n_c = TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/UpdateTodo/[id].js"],"names":["useSWR","mutate","formatRelative","differenceInMinutes","Link","Layout","gql","useRouter","hasuraUserClient","useAuthState","useAuthDispatch","GetCandidats","UpdateCompleted","TodoList","initialData","hasura","query","id","request","revalidateOnMount","data","Complete","update_Todo_by_pk","console","log","minHeight","Todo","map","Description","Name"],"mappings":"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","sourcesContent":["import useSWR, { mutate } from \"swr\";\r\nimport formatRelative from \"date-fns/formatRelative\";\r\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\r\nimport Link from \"next/link\";\r\nimport Layout from \"../Components/Layout\";\r\nimport gql from \"graphql-tag\";\r\nimport { useRouter } from \"next/router\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\r\nconst Todos = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst GetCandidats = gql`\r\n  query MyQuery($id: Int!) {\r\n    Todo(where: { user_id: { _eq: $id } }) {\r\n      Name\r\n      user_id\r\n      Description\r\n    }\r\n  }\r\n`;\r\nconst UpdateCompleted = gql`\r\n  mutation MyMutation($id: Int!) {\r\n    update_Todo_by_pk(pk_columns: { id: $id }, _set: { Completed: true }) {\r\n      Completed\r\n    }\r\n  }\r\n`;\r\nexport const getStaticPaths = async () => {\r\n  const hasura = hasuraUserClient();\r\n\r\n  const { User } = await hasura.request(Todos);\r\n\r\n  return {\r\n    paths: User.map(({ id }) => ({\r\n      params: {\r\n        id: id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n};\r\nexport const getStaticProps = async ({ params }) => {\r\n  const hasura = hasuraUserClient();\r\n  const { id } = params;\r\n\r\n  console.log(params);\r\n\r\n  const initialData = await hasura.request(GetCandidats, { id });\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\n\r\nexport default function TodoList({ initialData }) {\r\n  const hasura = hasuraUserClient();\r\n  const { query } = useRouter();\r\n  const { id } = query;\r\n  const { data } = useSWR(\r\n    [GetCandidats, id],\r\n\r\n    (query, id) => hasura.request(query),\r\n    {\r\n      initialData,\r\n      revalidateOnMount: true,\r\n    }\r\n  );\r\n  const Complete = async (id) => {\r\n    try {\r\n      const { update_Todo_by_pk } = await hasura.request(UpdateCompleted, {\r\n        id,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      {\" \"}\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-12\">\r\n            <div class=\"card card-white\">\r\n              <div class=\"card-body\">\r\n                <ul class=\"nav nav-pills todo-nav\">\r\n                  <li role=\"presentation\" class=\"nav-item all-task active\">\r\n                    <a href=\"#\" class=\"nav-link\">\r\n                      All\r\n                    </a>\r\n                  </li>\r\n                  <li role=\"presentation\" class=\"nav-item active-task\">\r\n                    <a href=\"#\" class=\"nav-link\">\r\n                      Active\r\n                    </a>\r\n                  </li>\r\n                  <li role=\"presentation\" class=\"nav-item completed-task\">\r\n                    <a href=\"#\" class=\"nav-link\">\r\n                      Completed\r\n                    </a>\r\n                  </li>\r\n                </ul>{\" \"}\r\n                {data.Todo.map(({ Description, Name }) => {\r\n                  return (\r\n                    <div key={id} class=\"todo-list\">\r\n                      <div class=\"todo-item\">\r\n                        <div class=\"checker\">\r\n                          <span class=\"\">\r\n                            <input\r\n                              name=\"Completed\"\r\n                              type=\"checkbox\"\r\n                              onChange={Complete(id)}\r\n                            />\r\n                          </span>\r\n                        </div>\r\n                        <span>\r\n                          {Name}: {Description}\r\n                        </span>\r\n\r\n                        <a\r\n                          href=\"javascript:void(0);\"\r\n                          class=\"float-right remove-todo-item\"\r\n                        >\r\n                          <i class=\"icon-close\"></i>\r\n                        </a>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}{\" \"}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}