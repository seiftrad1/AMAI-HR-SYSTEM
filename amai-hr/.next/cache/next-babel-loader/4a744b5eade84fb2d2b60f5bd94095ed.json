{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\RegisterCandidatAccount\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from \"react\";\nimport useSWR from \"swr\";\nimport { useRouter } from \"next/router\";\nimport { useForm } from \"react-hook-form\";\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nconst GetCandidateIds = gql`\n  {\n    Candidate {\n      id\n      Email\n      Last_Name\n      Name\n      domain\n      phone_number\n      Status\n    }\n  }\n`;\nconst GetCandidateById = gql`\n  query GetCategoryById($id: Int!) {\n    Candidate_by_pk(id: $id) {\n      id\n      Email\n      Last_Name\n      Name\n      domain\n      phone_number\n      Status\n    }\n  }\n`;\nconst AddNotification = gql`\n  mutation MyMutation($user_id: Int!) {\n    insert_notification_one(\n      object: {\n        user_id: $user_id\n        name: \"ttt\"\n        seen: false\n        description: \"tttttt\"\n      }\n    ) {\n      user_id\n      seen\n      name\n      id\n      description\n    }\n  }\n`;\nexport const getStaticPaths = async () => {\n  const hasura = hasuraUserClient();\n  const {\n    Candidate\n  } = await hasura.request(GetCandidateIds);\n  return {\n    paths: Candidate.map(({\n      id\n    }) => ({\n      params: {\n        id: id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const hasura = hasuraUserClient();\n  const {\n    id\n  } = params;\n  console.log(params);\n  console.log(id);\n  const initialData = await hasura.request(GetCandidateById, {\n    id\n  });\n  return {\n    props: {\n      initialData\n    },\n    revalidate: 1\n  };\n};\nexport default function RegisterPage({\n  initialData\n}) {\n  const {\n    query\n  } = useRouter();\n  const router = useRouter();\n  const hasura = hasuraUserClient();\n  const {\n    id\n  } = query;\n  const {\n    isAuthenticated\n  } = useAuthState();\n  const {\n    register: createUser\n  } = useAuthDispatch();\n  const {\n    handleSubmit,\n    register,\n    errors,\n    formState: {\n      isSubmitting\n    },\n    setError\n  } = useForm({\n    defaultValues: {\n      save_last_seen: true\n    }\n  }); // useEffect(() => {\n  //   if (isAuthenticated) {\n  //     router.push(\"/\");\n  //   }\n  // }, [isAuthenticated]);\n\n  const {\n    data,\n    mutate\n  } = useSWR([GetCandidateById, id], (query, id) => hasura.request(query, {\n    id\n  }), {\n    initialData,\n    revalidateOnMount: true\n  }); // if (isAuthenticated) return null;\n\n  const onSubmit = async ({\n    name,\n    last_name,\n    email,\n    domain,\n    phone_number,\n    password,\n    save_last_seen\n  }) => {\n    try {\n      await createUser({\n        name,\n        last_name,\n        email,\n        domain,\n        phone_number,\n        password,\n        save_last_seen\n      });\n      const {\n        user_id\n      } = id;\n      const {\n        insert_notification_one\n      } = await hasura.request(AddNotification, {\n        user_id\n      });\n      await fetch(\"/api/AcceptEmail\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      });\n      router.push(\"/CandidatList\");\n    } catch ({\n      message\n    }) {\n      setError(\"email\", {\n        type: \"manual\",\n        message\n      });\n    }\n  };\n\n  return __jsx(\"body\", {\n    className: \"login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 5\n    }\n  }, __jsx(\"form\", {\n    class: \"register-form\",\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    class: \"content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, \" \", __jsx(\"h3\", {\n    class: \"font-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, \"Register Candidate\"), \" \", __jsx(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.Name,\n    class: \"form-control form-control-solid placeholder-no-fix\",\n    name: \"name\",\n    id: \"name\",\n    ref: register,\n    placeholder: \"Your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.Last_Name,\n    class: \"form-control form-control-solid placeholder-no-fix\",\n    name: \"last_name\",\n    id: \"last_name\",\n    ref: register,\n    placeholder: \"Your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.phone_number,\n    class: \"form-control form-control-solid placeholder-no-fix\",\n    name: \"phone_number\",\n    id: \"phone_number\",\n    ref: register,\n    placeholder: \"Your name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  })), \" \", __jsx(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 11\n    }\n  }, __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.domain,\n    class: \"form-control form-control-solid placeholder-no-fix\",\n    name: \"domain\",\n    id: \"domain\",\n    ref: register,\n    placeholder: \"Domain\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }\n  })), errors.name && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 27\n    }\n  }, errors.name.message), __jsx(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, \" \", __jsx(\"input\", {\n    defaultValue: data.Candidate_by_pk.Email,\n    class: \"form-control form-control-solid placeholder-no-fix\",\n    type: \"email\",\n    name: \"email\",\n    id: \"email\",\n    ref: register({\n      required: \"You must provide a email.\",\n      pattern: {\n        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n        message: \"You must provide a valid email\"\n      }\n    }),\n    placeholder: \"Your email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }), errors.email && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 30\n    }\n  }, errors.email.message)), __jsx(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, \" \", __jsx(\"input\", {\n    class: \"form-control form-control-solid placeholder-no-fix\",\n    type: \"password\",\n    name: \"password\",\n    id: \"password\",\n    ref: register({\n      required: \"You must provide a password.\",\n      minLength: {\n        message: \"Your password must be at least 6 characters\",\n        value: 6\n      }\n    }),\n    placeholder: \"Choose a password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }\n  }), errors.password && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 33\n    }\n  }, errors.password.message)), __jsx(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, \" \", __jsx(\"label\", {\n    htmlFor: \"save_last_seen\",\n    class: \"rememberme check mt-checkbox mt-checkbox-outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    id: \"save_last_seen\",\n    name: \"save_last_seen\",\n    ref: register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 15\n    }\n  }), \"Show as online to other users\", __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 44\n    }\n  }))), __jsx(\"div\", {\n    class: \"create-account\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    class: \"btn green uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }\n  }, \"Create account\")), \" \")));\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/RegisterCandidatAccount/[id].js"],"names":["useEffect","useSWR","useRouter","useForm","gql","hasuraUserClient","useAuthState","useAuthDispatch","GetCandidateIds","GetCandidateById","AddNotification","getStaticPaths","hasura","Candidate","request","paths","map","id","params","toString","fallback","getStaticProps","console","log","initialData","props","revalidate","RegisterPage","query","router","isAuthenticated","register","createUser","handleSubmit","errors","formState","isSubmitting","setError","defaultValues","save_last_seen","data","mutate","revalidateOnMount","onSubmit","name","last_name","email","domain","phone_number","password","user_id","insert_notification_one","fetch","method","headers","body","JSON","stringify","push","message","type","Candidate_by_pk","Name","Last_Name","Email","required","pattern","value","minLength"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\nimport useSWR from \"swr\";\r\n\r\nimport { useRouter } from \"next/router\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\r\n\r\nconst GetCandidateIds = gql`\r\n  {\r\n    Candidate {\r\n      id\r\n      Email\r\n      Last_Name\r\n      Name\r\n      domain\r\n      phone_number\r\n      Status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GetCandidateById = gql`\r\n  query GetCategoryById($id: Int!) {\r\n    Candidate_by_pk(id: $id) {\r\n      id\r\n      Email\r\n      Last_Name\r\n      Name\r\n      domain\r\n      phone_number\r\n      Status\r\n    }\r\n  }\r\n`;\r\nconst AddNotification = gql`\r\n  mutation MyMutation($user_id: Int!) {\r\n    insert_notification_one(\r\n      object: {\r\n        user_id: $user_id\r\n        name: \"ttt\"\r\n        seen: false\r\n        description: \"tttttt\"\r\n      }\r\n    ) {\r\n      user_id\r\n      seen\r\n      name\r\n      id\r\n      description\r\n    }\r\n  }\r\n`;\r\nexport const getStaticPaths = async () => {\r\n  const hasura = hasuraUserClient();\r\n\r\n  const { Candidate } = await hasura.request(GetCandidateIds);\r\n\r\n  return {\r\n    paths: Candidate.map(({ id }) => ({\r\n      params: {\r\n        id: id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n};\r\n\r\nexport const getStaticProps = async ({ params }) => {\r\n  const hasura = hasuraUserClient();\r\n  const { id } = params;\r\n  console.log(params);\r\n  console.log(id);\r\n  const initialData = await hasura.request(GetCandidateById, { id });\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\nexport default function RegisterPage({ initialData }) {\r\n  const { query } = useRouter();\r\n  const router = useRouter();\r\n  const hasura = hasuraUserClient();\r\n  const { id } = query;\r\n  const { isAuthenticated } = useAuthState();\r\n  const { register: createUser } = useAuthDispatch();\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    errors,\r\n    formState: { isSubmitting },\r\n    setError,\r\n  } = useForm({ defaultValues: { save_last_seen: true } });\r\n  // useEffect(() => {\r\n  //   if (isAuthenticated) {\r\n  //     router.push(\"/\");\r\n  //   }\r\n  // }, [isAuthenticated]);\r\n  const { data, mutate } = useSWR(\r\n    [GetCandidateById, id],\r\n    (query, id) => hasura.request(query, { id }),\r\n    {\r\n      initialData,\r\n      revalidateOnMount: true,\r\n    }\r\n  );\r\n  // if (isAuthenticated) return null;\r\n  const onSubmit = async ({\r\n    name,\r\n    last_name,\r\n    email,\r\n    domain,\r\n    phone_number,\r\n    password,\r\n    save_last_seen,\r\n  }) => {\r\n    try {\r\n      await createUser({\r\n        name,\r\n        last_name,\r\n        email,\r\n        domain,\r\n        phone_number,\r\n        password,\r\n        save_last_seen,\r\n      });\r\n      const { user_id } = id;\r\n      const { insert_notification_one } = await hasura.request(\r\n        AddNotification,\r\n        {\r\n          user_id,\r\n        }\r\n      );\r\n      await fetch(\"/api/AcceptEmail\", {\r\n        method: \"POST\",\r\n        headers: { \"content-type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      router.push(\"/CandidatList\");\r\n    } catch ({ message }) {\r\n      setError(\"email\", {\r\n        type: \"manual\",\r\n        message,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <body className=\"login\">\r\n      <form class=\"register-form\" onSubmit={handleSubmit(onSubmit)}>\r\n        <div class=\"content\">\r\n          {\" \"}\r\n          <h3 class=\"font-green\">Register Candidate</h3>{\" \"}\r\n          <div class=\"form-group\">\r\n            <input\r\n              defaultValue={data.Candidate_by_pk.Name}\r\n              class=\"form-control form-control-solid placeholder-no-fix\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              ref={register}\r\n              placeholder=\"Your name\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input\r\n              defaultValue={data.Candidate_by_pk.Last_Name}\r\n              class=\"form-control form-control-solid placeholder-no-fix\"\r\n              name=\"last_name\"\r\n              id=\"last_name\"\r\n              ref={register}\r\n              placeholder=\"Your name\"\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <input\r\n              defaultValue={data.Candidate_by_pk.phone_number}\r\n              class=\"form-control form-control-solid placeholder-no-fix\"\r\n              name=\"phone_number\"\r\n              id=\"phone_number\"\r\n              ref={register}\r\n              placeholder=\"Your name\"\r\n            />\r\n          </div>{\" \"}\r\n          <div class=\"form-group\">\r\n            <input\r\n              defaultValue={data.Candidate_by_pk.domain}\r\n              class=\"form-control form-control-solid placeholder-no-fix\"\r\n              name=\"domain\"\r\n              id=\"domain\"\r\n              ref={register}\r\n              placeholder=\"Domain\"\r\n            />\r\n          </div>\r\n          {errors.name && <span>{errors.name.message}</span>}\r\n          <div class=\"form-group\">\r\n            {\" \"}\r\n            <input\r\n              defaultValue={data.Candidate_by_pk.Email}\r\n              class=\"form-control form-control-solid placeholder-no-fix\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              ref={register({\r\n                required: \"You must provide a email.\",\r\n                pattern: {\r\n                  value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                  message: \"You must provide a valid email\",\r\n                },\r\n              })}\r\n              placeholder=\"Your email\"\r\n            />\r\n            {errors.email && <span>{errors.email.message}</span>}\r\n          </div>\r\n          <div class=\"form-group\">\r\n            {\" \"}\r\n            <input\r\n              class=\"form-control form-control-solid placeholder-no-fix\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              ref={register({\r\n                required: \"You must provide a password.\",\r\n                minLength: {\r\n                  message: \"Your password must be at least 6 characters\",\r\n                  value: 6,\r\n                },\r\n              })}\r\n              placeholder=\"Choose a password\"\r\n            />\r\n            {errors.password && <span>{errors.password.message}</span>}\r\n          </div>\r\n          <div class=\"form-group\">\r\n            {\" \"}\r\n            <label\r\n              htmlFor=\"save_last_seen\"\r\n              class=\"rememberme check mt-checkbox mt-checkbox-outline\"\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                id=\"save_last_seen\"\r\n                name=\"save_last_seen\"\r\n                ref={register}\r\n              />\r\n              Show as online to other users<span></span>\r\n            </label>\r\n          </div>\r\n          <div class=\"create-account\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={isSubmitting}\r\n              class=\"btn green uppercase\"\r\n            >\r\n              Create account\r\n            </button>\r\n          </div>{\" \"}\r\n        </div>\r\n      </form>\r\n    </body>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}