{"ast":null,"code":"import useSWR, { mutate } from \"swr\";\nimport { useRouter } from \"next/router\";\nimport formidable from \"formidable\";\nimport fs from \"fs\";\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nconst GetUsers = gql`\n  query MyQuery {\n    User {\n      id\n      Name\n      email\n    }\n  }\n`;\nconst GetCandidats = gql`\n  query MyQuery($id: Int!) {\n    Todo(where: { user_id: { _eq: $id } }) {\n      Name\n      user_id\n    }\n  }\n`;\n\nconst post = async (req, res) => {\n  const form = new formidable.IncomingForm();\n  form.parse(req, async function (err, fields, files) {\n    await saveFile(files.file);\n    return res.status(201).send(\"\");\n  });\n};\n\nconst saveFile = async (file, id) => {\n  const hasura = hasuraUserClient();\n\n  const getStaticPaths = async () => {\n    const hasura = hasuraUserClient();\n    const {\n      User\n    } = await hasura.request(GetUsers);\n    return {\n      paths: User.map(({\n        id\n      }) => ({\n        params: {\n          id: id.toString()\n        }\n      })),\n      fallback: false\n    };\n  };\n\n  const getStaticProps = async ({\n    params\n  }) => {\n    const {\n      id\n    } = params;\n    console.log(params);\n    console.log(id);\n    const data = fs.readFileSync(file.path);\n    fs.writeFileSync(`./public/${file.name}`, data);\n    await fs.unlinkSync(file.path);\n    const Avatar = file.name;\n    const UploadImage = gql`\n      mutation MyMutation($Avatar: String!, $id: Int!) {\n        update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\n          Avatar\n          Name\n        }\n      }\n    `;\n\n    try {\n      await hasura.request(UploadImage, {\n        id,\n        Avatar\n      });\n      mutate();\n    } catch (error) {\n      console.error(error);\n    }\n\n    return;\n  };\n};\n\nexport default ((req, res) => {\n  req.method === \"POST\" ? post(req, res) : req.method === \"PUT\" ? console.log(\"PUT\") : req.method === \"DELETE\" ? console.log(\"DELETE\") : req.method === \"GET\" ? console.log(\"GET\") : res.status(404).send(\"\");\n});","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/api/file.js"],"names":["useSWR","mutate","useRouter","formidable","fs","hasuraAdminClient","gql","hasuraUserClient","config","api","bodyParser","GetUsers","GetCandidats","post","req","res","form","IncomingForm","parse","err","fields","files","saveFile","file","status","send","id","hasura","getStaticPaths","User","request","paths","map","params","toString","fallback","getStaticProps","console","log","data","readFileSync","path","writeFileSync","name","unlinkSync","Avatar","UploadImage","error","method"],"mappings":"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","sourcesContent":["import useSWR, { mutate } from \"swr\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nimport formidable from \"formidable\";\r\nimport fs from \"fs\";\r\nimport { hasuraAdminClient, gql } from \"../../lib/hasura-admin-client\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\n\r\nexport const config = {\r\n  api: {\r\n    bodyParser: false,\r\n  },\r\n};\r\n\r\nconst GetUsers = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n      Name\r\n      email\r\n    }\r\n  }\r\n`;\r\nconst GetCandidats = gql`\r\n  query MyQuery($id: Int!) {\r\n    Todo(where: { user_id: { _eq: $id } }) {\r\n      Name\r\n      user_id\r\n    }\r\n  }\r\n`;\r\nconst post = async (req, res) => {\r\n  const form = new formidable.IncomingForm();\r\n  form.parse(req, async function (err, fields, files) {\r\n    await saveFile(files.file);\r\n    return res.status(201).send(\"\");\r\n  });\r\n};\r\n\r\nconst saveFile = async (file, id) => {\r\n  const hasura = hasuraUserClient();\r\n  const getStaticPaths = async () => {\r\n    const hasura = hasuraUserClient();\r\n\r\n    const { User } = await hasura.request(GetUsers);\r\n\r\n    return {\r\n      paths: User.map(({ id }) => ({\r\n        params: {\r\n          id: id.toString(),\r\n        },\r\n      })),\r\n      fallback: false,\r\n    };\r\n  };\r\n  const getStaticProps = async ({ params }) => {\r\n    const { id } = params;\r\n\r\n    console.log(params);\r\n\r\n    console.log(id);\r\n    const data = fs.readFileSync(file.path);\r\n    fs.writeFileSync(`./public/${file.name}`, data);\r\n    await fs.unlinkSync(file.path);\r\n    const Avatar = file.name;\r\n\r\n    const UploadImage = gql`\r\n      mutation MyMutation($Avatar: String!, $id: Int!) {\r\n        update_User_by_pk(pk_columns: { id: $id }, _set: { Avatar: $Avatar }) {\r\n          Avatar\r\n          Name\r\n        }\r\n      }\r\n    `;\r\n    try {\r\n      await hasura.request(UploadImage, { id, Avatar });\r\n      mutate();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return;\r\n  };\r\n};\r\n\r\nexport default (req, res) => {\r\n  req.method === \"POST\"\r\n    ? post(req, res)\r\n    : req.method === \"PUT\"\r\n    ? console.log(\"PUT\")\r\n    : req.method === \"DELETE\"\r\n    ? console.log(\"DELETE\")\r\n    : req.method === \"GET\"\r\n    ? console.log(\"GET\")\r\n    : res.status(404).send(\"\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}