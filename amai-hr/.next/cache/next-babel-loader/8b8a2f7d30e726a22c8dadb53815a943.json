{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\updateEvent\\\\[id].js\";\nvar __jsx = React.createElement;\nimport useSWR, { mutate } from \"swr\";\nimport { useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useForm } from \"react-hook-form\";\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Link from \"next/link\";\nimport gql from \"graphql-tag\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { format, intervalToDuration, parseISO } from \"date-fns\";\nimport FullCalendar from \"@fullcalendar/react\"; // must go before plugins\n\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport \"@fullcalendar/common/main.css\";\nimport \"@fullcalendar/daygrid/main.css\";\nimport \"@fullcalendar/timegrid/main.css\";\nimport \"@fullcalendar/list/main.css\";\nimport { TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport listPlugin from \"@fullcalendar/list\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nconst today = new Date().toISOString().substring(0, 19);\nconst GetUsersId = gql`\n  {\n    Event {\n      id\n    }\n  }\n`;\nconst GetEvents = gql`\n  query MyQuery {\n    Event {\n      id\n      Title\n      description\n      start_date\n    }\n  }\n`;\nconst geteventbyid = gql`\n  query MyQuery($id: Int!) {\n    Event_by_pk(id: $id) {\n      id\n      Title\n      description\n      start_date\n    }\n  }\n`;\nconst getUserEmail = gql`\n  query MyQuery {\n    User {\n      email\n    }\n  }\n`;\nconst AddNotification = gql`\n  mutation MyMutation {\n    insert_notification_one(\n      object: {\n        name: \"Event\"\n        seen: false\n        description: \"a new event has been added to your calendar!\"\n      }\n    ) {\n      seen\n      name\n      id\n      description\n    }\n  }\n`;\nconst getNotifications = gql`\n  query MyQuery {\n    notification(where: { user_id: { _is_null: true } }) {\n      description\n      name\n      seen\n    }\n    notification_aggregate(where: { user_id: { _is_null: true } }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nexport const getStaticPaths = async () => {\n  const hasura = hasuraUserClient();\n  const {\n    Event\n  } = await hasura.request(GetUsersId);\n  return {\n    paths: Event.map(({\n      id\n    }) => ({\n      params: {\n        id: id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    id\n  } = params;\n  const hasura = hasuraUserClient();\n  const initialData = await hasura.request(GetEvents);\n  const datar = await hasura.request(getNotifications);\n  const emails = await hasura.request(getUserEmail);\n  const event = await hasura.request(geteventbyid, {\n    id\n  });\n  return {\n    props: {\n      initialData,\n      datar,\n      emails,\n      event\n    },\n    revalidate: 1\n  };\n};\nexport default function Calendar({\n  initialData,\n  datar,\n  emails,\n  event\n}) {\n  const {\n    isAuthenticated,\n    user\n  } = useAuthState();\n  const {\n    handleSubmit,\n    register,\n    control,\n    errors,\n    formState: {\n      isSubmitting\n    }\n  } = useForm();\n  const hasura = hasuraUserClient();\n  const router = useRouter();\n  const {\n    data\n  } = useSWR(GetEvents, query => hasura.request(query), {\n    initialData,\n    revalidateOnMount: true\n  });\n  const {\n    datat\n  } = useSWR(getUserEmail, query => hasura.request(query), {\n    emails,\n    revalidateOnMount: true\n  });\n\n  const onSubmit = async ({\n    Title,\n    datetime,\n    description\n  }) => {\n    const start_date = datetime;\n\n    try {\n      const {\n        insert_Event_one\n      } = await hasura.request(insertEvent, {\n        Title,\n        description,\n        start_date,\n        manager_id: user.id\n      });\n\n      if (isAuthenticated) {\n        const {\n          insert_notification_one\n        } = await hasura.request(AddNotification);\n      }\n\n      window.location.reload();\n      await fetch(\"/api/contact\", {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/json\"\n        },\n        body: JSON.stringify(emails)\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const deleteEvent = gql`\n    mutation MyMutation($id: Int = 10) {\n      delete_Event_by_pk(id: $id) {\n        id\n      }\n    }\n  `;\n\n  const handleDateClick = arg => {\n    // bind with an arrow function\n    alert(`date ${arg.dateStr} marked`); // alert(\"Coordinates: \" + arg.jsEvent.pageX + \",\" + arg.jsEvent.pageY);\n    // alert(\"Current view: \" + arg.view.type);\n    // change the day's background color just for fun\n\n    arg.dayEl.style.backgroundColor = \"#FF5C5C\";\n  };\n\n  const handleevebt = async arg => {\n    if (confirm(`are you sure you want to delete this event ${arg.event.title}?`)) {\n      const c = {\n        id: arg.event.id\n      };\n\n      try {\n        await hasura.request(deleteEvent, c);\n        mutate();\n        window.location.reload();\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      return null;\n    }\n  };\n\n  const weekendsVisible = arg => {\n    // alert(\"Coordinates: \" + arg.jsEvent.pageX + \",\" + arg.jsEvent.pageY);\n    // alert(\"Current view: \" + arg.view.type);\n    // change the day's background color just for fun\n    return arg.dayEl.style.backgroundColor = \"#FF5C5C\";\n  };\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"portlet light portlet-fit bordered calendar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"portlet-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"caption\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, __jsx(\"i\", {\n    className: \" icon-layers font-green\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }), __jsx(\"span\", {\n    className: \"caption-subject font-green sbold uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 15\n    }\n  }, \"Calendar\"))), __jsx(\"div\", {\n    className: \"portlet-body \",\n    style: {\n      paddingTop: 45\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"col-md-3 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }, __jsx(\"h3\", {\n    className: \"event-form-title margin-bottom-20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 17\n    }\n  }, \"Event\"), isAuthenticated ? user.Role === \"Manager\" ? __jsx(\"div\", {\n    id: \"external-events\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 21\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 23\n    }\n  }, \" \", __jsx(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"Title\",\n    className: \"form-control\",\n    placeholder: \"Event Type...\",\n    defaultValue: event.Event_by_pk.Title,\n    id: \"event_title\",\n    ref: register({\n      required: \"You must provide a the event\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 27\n    }\n  }), \" \", errors.Title && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 44\n    }\n  }, errors.Title.message)), \" \", __jsx(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 25\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    name: \"description\",\n    className: \"form-control\",\n    placeholder: \"Description\",\n    id: \"event_title\",\n    ref: register,\n    defaultValue: event.Event_by_pk.description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 27\n    }\n  }), \" \"), __jsx(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 25\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 27\n    }\n  }, \"Next appointment\"), \" \", __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 59\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 27\n    }\n  }), __jsx(TextField, {\n    id: \"datetime\",\n    name: \"datetime\",\n    type: \"datetime-local\",\n    defaultValue: today,\n    inputRef: register,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 27\n    }\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 25\n    }\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    className: \"btn green\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 27\n    }\n  }, \" \", \"Update Event\", \" \"))), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 23\n    }\n  }), __jsx(\"hr\", {\n    className: \"visible-xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 23\n    }\n  }), \" \") : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 21\n    }\n  }) : __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 19\n    }\n  })), __jsx(\"div\", {\n    className: \"col-md-9 \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 15\n    }\n  }, __jsx(FullCalendar, {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin, listPlugin],\n    headerToolbar: {\n      left: \"prev,next today\",\n      center: \"title\",\n      right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n    },\n    initialView: \"dayGridMonth\",\n    editable: true,\n    selectable: true,\n    selectMirror: true,\n    dayMaxEvents: true,\n    themeSystem: \"bootstrap\",\n    events: data.Event.map(({\n      id,\n      Title,\n      start_date\n    }) => {\n      return {\n        id: id,\n        title: Title,\n        date: start_date,\n        color: \"red\"\n      };\n    }),\n    dateClick: handleDateClick // initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n    // select={this.handleDateSelect}\n    // eventContent={renderEventContent} // custom render function\n    // eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n\n    /* you can update a remote database when these fire:\r\n    eventAdd={function(){}}\r\n    eventChange={function(){}}\r\n    // */\n    //       validRange={{\n    //         start: \"2021-08-03\",\n    //         end: \"2021-08-07\",\n    //       }}\n    ,\n    weekends: false,\n    eventClick: handleevebt // select={color}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 17\n    }\n  })))))));\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/updateEvent/[id].js"],"names":["useSWR","mutate","useEffect","useRouter","useForm","React","useState","Form","Link","gql","DatePicker","format","intervalToDuration","parseISO","FullCalendar","dayGridPlugin","TextField","makeStyles","useAuthState","useAuthDispatch","interactionPlugin","timeGridPlugin","listPlugin","hasuraUserClient","today","Date","toISOString","substring","GetUsersId","GetEvents","geteventbyid","getUserEmail","AddNotification","getNotifications","getStaticPaths","hasura","Event","request","paths","map","id","params","toString","fallback","getStaticProps","initialData","datar","emails","event","props","revalidate","Calendar","isAuthenticated","user","handleSubmit","register","control","errors","formState","isSubmitting","router","data","query","revalidateOnMount","datat","onSubmit","Title","datetime","description","start_date","insert_Event_one","insertEvent","manager_id","insert_notification_one","window","location","reload","fetch","method","headers","body","JSON","stringify","err","console","log","deleteEvent","handleDateClick","arg","alert","dateStr","dayEl","style","backgroundColor","handleevebt","confirm","title","c","error","weekendsVisible","minHeight","paddingTop","Role","Event_by_pk","required","message","left","center","right","date","color"],"mappings":"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","sourcesContent":["import useSWR, { mutate } from \"swr\";\r\nimport { useEffect } from \"react\";\r\nimport { useRouter } from \"next/router\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport Link from \"next/link\";\r\nimport gql from \"graphql-tag\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { format, intervalToDuration, parseISO } from \"date-fns\";\r\nimport FullCalendar from \"@fullcalendar/react\"; // must go before plugins\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport \"@fullcalendar/common/main.css\";\r\nimport \"@fullcalendar/daygrid/main.css\";\r\nimport \"@fullcalendar/timegrid/main.css\";\r\nimport \"@fullcalendar/list/main.css\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nconst today = new Date().toISOString().substring(0, 19);\r\n\r\nconst GetUsersId = gql`\r\n  {\r\n    Event {\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst GetEvents = gql`\r\n  query MyQuery {\r\n    Event {\r\n      id\r\n      Title\r\n      description\r\n      start_date\r\n    }\r\n  }\r\n`;\r\nconst geteventbyid = gql`\r\n  query MyQuery($id: Int!) {\r\n    Event_by_pk(id: $id) {\r\n      id\r\n      Title\r\n      description\r\n      start_date\r\n    }\r\n  }\r\n`;\r\nconst getUserEmail = gql`\r\n  query MyQuery {\r\n    User {\r\n      email\r\n    }\r\n  }\r\n`;\r\nconst AddNotification = gql`\r\n  mutation MyMutation {\r\n    insert_notification_one(\r\n      object: {\r\n        name: \"Event\"\r\n        seen: false\r\n        description: \"a new event has been added to your calendar!\"\r\n      }\r\n    ) {\r\n      seen\r\n      name\r\n      id\r\n      description\r\n    }\r\n  }\r\n`;\r\n\r\nconst getNotifications = gql`\r\n  query MyQuery {\r\n    notification(where: { user_id: { _is_null: true } }) {\r\n      description\r\n      name\r\n      seen\r\n    }\r\n    notification_aggregate(where: { user_id: { _is_null: true } }) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getStaticPaths = async () => {\r\n  const hasura = hasuraUserClient();\r\n\r\n  const { Event } = await hasura.request(GetUsersId);\r\n\r\n  return {\r\n    paths: Event.map(({ id }) => ({\r\n      params: {\r\n        id: id.toString(),\r\n      },\r\n    })),\r\n\r\n    fallback: false,\r\n  };\r\n};\r\n\r\nexport const getStaticProps = async ({ params }) => {\r\n  const { id } = params;\r\n\r\n  const hasura = hasuraUserClient();\r\n  const initialData = await hasura.request(GetEvents);\r\n  const datar = await hasura.request(getNotifications);\r\n  const emails = await hasura.request(getUserEmail);\r\n  const event = await hasura.request(geteventbyid, { id });\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n      datar,\r\n      emails,\r\n      event,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\n\r\nexport default function Calendar({ initialData, datar, emails, event }) {\r\n  const { isAuthenticated, user } = useAuthState();\r\n\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    errors,\r\n    formState: { isSubmitting },\r\n  } = useForm();\r\n  const hasura = hasuraUserClient();\r\n  const router = useRouter();\r\n  const { data } = useSWR(GetEvents, (query) => hasura.request(query), {\r\n    initialData,\r\n    revalidateOnMount: true,\r\n  });\r\n  const { datat } = useSWR(getUserEmail, (query) => hasura.request(query), {\r\n    emails,\r\n    revalidateOnMount: true,\r\n  });\r\n  const onSubmit = async ({ Title, datetime, description }) => {\r\n    const start_date = datetime;\r\n\r\n    try {\r\n      const { insert_Event_one } = await hasura.request(insertEvent, {\r\n        Title,\r\n        description,\r\n        start_date,\r\n        manager_id: user.id,\r\n      });\r\n      if (isAuthenticated) {\r\n        const { insert_notification_one } = await hasura.request(\r\n          AddNotification\r\n        );\r\n      }\r\n      window.location.reload();\r\n      await fetch(\"/api/contact\", {\r\n        method: \"POST\",\r\n        headers: { \"content-type\": \"application/json\" },\r\n        body: JSON.stringify(emails),\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const deleteEvent = gql`\r\n    mutation MyMutation($id: Int = 10) {\r\n      delete_Event_by_pk(id: $id) {\r\n        id\r\n      }\r\n    }\r\n  `;\r\n  const handleDateClick = (arg) => {\r\n    // bind with an arrow function\r\n    alert(`date ${arg.dateStr} marked`);\r\n    // alert(\"Coordinates: \" + arg.jsEvent.pageX + \",\" + arg.jsEvent.pageY);\r\n    // alert(\"Current view: \" + arg.view.type);\r\n    // change the day's background color just for fun\r\n    arg.dayEl.style.backgroundColor = \"#FF5C5C\";\r\n  };\r\n  const handleevebt = async (arg) => {\r\n    if (\r\n      confirm(`are you sure you want to delete this event ${arg.event.title}?`)\r\n    ) {\r\n      const c = { id: arg.event.id };\r\n      try {\r\n        await hasura.request(deleteEvent, c);\r\n        mutate();\r\n        window.location.reload();\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n  const weekendsVisible = (arg) => {\r\n    // alert(\"Coordinates: \" + arg.jsEvent.pageX + \",\" + arg.jsEvent.pageY);\r\n    // alert(\"Current view: \" + arg.view.type);\r\n    // change the day's background color just for fun\r\n    return (arg.dayEl.style.backgroundColor = \"#FF5C5C\");\r\n  };\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        <div className=\"portlet light portlet-fit bordered calendar\">\r\n          <div className=\"portlet-title\">\r\n            <div className=\"caption\">\r\n              <i className=\" icon-layers font-green\"></i>\r\n              <span className=\"caption-subject font-green sbold uppercase\">\r\n                Calendar\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div className=\"portlet-body \" style={{ paddingTop: 45 }}>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3 \">\r\n                <h3 className=\"event-form-title margin-bottom-20\">Event</h3>\r\n                {isAuthenticated ? (\r\n                  user.Role === \"Manager\" ? (\r\n                    <div id=\"external-events\">\r\n                      <form onSubmit={handleSubmit(onSubmit)}>\r\n                        {\" \"}\r\n                        <div className=\"form-group\">\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"Title\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Event Type...\"\r\n                            defaultValue={event.Event_by_pk.Title}\r\n                            id=\"event_title\"\r\n                            ref={register({\r\n                              required: \"You must provide a the event\",\r\n                            })}\r\n                          />{\" \"}\r\n                          {errors.Title && <span>{errors.Title.message}</span>}\r\n                        </div>{\" \"}\r\n                        <div className=\"form-group\">\r\n                          <input\r\n                            type=\"text\"\r\n                            name=\"description\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Description\"\r\n                            id=\"event_title\"\r\n                            ref={register}\r\n                            defaultValue={event.Event_by_pk.description}\r\n                          />{\" \"}\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                          <label>Next appointment</label> <br />\r\n                          <br />\r\n                          <TextField\r\n                            id=\"datetime\"\r\n                            name=\"datetime\"\r\n                            type=\"datetime-local\"\r\n                            defaultValue={today}\r\n                            inputRef={register}\r\n                          />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                          <button\r\n                            type=\"submit\"\r\n                            className=\"btn green\"\r\n                            disabled={isSubmitting}\r\n                          >\r\n                            {\" \"}\r\n                            Update Event{\" \"}\r\n                          </button>\r\n                        </div>\r\n                      </form>\r\n                      <hr />\r\n                      <hr className=\"visible-xs\" />{\" \"}\r\n                    </div>\r\n                  ) : (\r\n                    <div></div>\r\n                  )\r\n                ) : (\r\n                  <div></div>\r\n                )}\r\n              </div>\r\n              <div className=\"col-md-9 \">\r\n                <FullCalendar\r\n                  plugins={[\r\n                    dayGridPlugin,\r\n                    timeGridPlugin,\r\n                    interactionPlugin,\r\n                    listPlugin,\r\n                  ]}\r\n                  headerToolbar={{\r\n                    left: \"prev,next today\",\r\n                    center: \"title\",\r\n                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\",\r\n                  }}\r\n                  initialView=\"dayGridMonth\"\r\n                  editable={true}\r\n                  selectable={true}\r\n                  selectMirror={true}\r\n                  dayMaxEvents={true}\r\n                  themeSystem=\"bootstrap\"\r\n                  events={data.Event.map(({ id, Title, start_date }) => {\r\n                    return {\r\n                      id: id,\r\n                      title: Title,\r\n                      date: start_date,\r\n                      color: \"red\",\r\n                    };\r\n                  })}\r\n                  dateClick={handleDateClick}\r\n                  // initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n                  // select={this.handleDateSelect}\r\n                  // eventContent={renderEventContent} // custom render function\r\n                  // eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n                  /* you can update a remote database when these fire:\r\n                eventAdd={function(){}}\r\n                eventChange={function(){}}\r\n                // */\r\n                  //       validRange={{\r\n                  //         start: \"2021-08-03\",\r\n                  //         end: \"2021-08-07\",\r\n                  //       }}\r\n                  weekends={false}\r\n                  eventClick={handleevebt}\r\n                  // select={color}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}