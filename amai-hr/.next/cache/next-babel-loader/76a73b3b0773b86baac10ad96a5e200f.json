{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\AssignTask\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from \"next/router\";\nimport useSWR from \"swr\";\nimport { useForm } from \"react-hook-form\";\nimport Link from \"next/link\";\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\nimport { Form } from \"react-bootstrap\";\nimport { format, parseISO } from \"date-fns\";\nvar from = new Date().toISOString();\nvar getProjectsIds = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  {\\n    Project {\\n      id\\n      Title\\n      Description\\n    }\\n  }\\n\"])));\nvar insertmultiple = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  mutation MyMutation(\\n    $Description: String!\\n    $Project_id: Int!\\n    $name: String!\\n    $from: timestamptz!\\n  ) {\\n    insert_Task(\\n      objects: {\\n        Date: $from\\n        Description: $Description\\n        completed: false\\n        Project_id: $Project_id\\n        name: $name\\n      }\\n    ) {\\n      affected_rows\\n    }\\n  }\\n\"])));\nvar assignu = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  mutation MyMutation($project_id: Int!, $user_id: Int!) {\\n    insert_user_project_one(\\n      object: { project_id: $project_id, user_id: $user_id }\\n    ) {\\n      project_id\\n      user_id\\n    }\\n  }\\n\"])));\nexport var __N_SSG = true;\nexport default function AssignTask(_ref) {\n  _s();\n\n  var initialData = _ref.initialData,\n      dataU = _ref.dataU,\n      dataz = _ref.dataz,\n      dataf = _ref.dataf,\n      tasks = _ref.tasks;\n  var hasura = hasuraUserClient();\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var router = useRouter();\n  var idP = query.idP;\n\n  var _useForm = useForm(),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      control = _useForm.control,\n      errors = _useForm.errors,\n      isSubmitting = _useForm.formState.isSubmitting,\n      defaultValues = _extends({}, _useForm.defaultValues);\n\n  console.log(dataz.User);\n\n  var assign = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var id, _yield$hasura$request, insert_user_project_one;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              id = _ref2.id;\n              console.log(id);\n\n              if (!confirm(\"are you sure you want to assign the project to this employee? \")) {\n                _context.next = 16;\n                break;\n              }\n\n              _context.prev = 3;\n              _context.next = 6;\n              return hasura.request(assignu, {\n                project_id: query.id,\n                user_id: id\n              });\n\n            case 6:\n              _yield$hasura$request = _context.sent;\n              insert_user_project_one = _yield$hasura$request.insert_user_project_one;\n              router.push(\"/Project/List\");\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](3);\n              console.log(_context.t0);\n\n            case 14:\n              _context.next = 17;\n              break;\n\n            case 16:\n              return _context.abrupt(\"return\", null);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n\n    return function assign(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref4) {\n      var Description, name, user_id, _yield$hasura$request2, insert_Task_one;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Description = _ref4.Description, name = _ref4.name, user_id = _ref4.user_id;\n              console.log(from);\n              _context2.prev = 2;\n              _context2.next = 5;\n              return hasura.request(insertmultiple, {\n                Description: Description,\n                from: from,\n                name: name,\n                Project_id: query.id\n              });\n\n            case 5:\n              _yield$hasura$request2 = _context2.sent;\n              insert_Task_one = _yield$hasura$request2.insert_Task_one;\n              window.location.reload();\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.log(_context2.t0);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[2, 10]]);\n    }));\n\n    return function onSubmit(_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }\n  }, \"test\"), \" \");\n}\n\n_s(AssignTask, \"efEIOZbwh0btHiwoq8UL1OPW7kc=\", false, function () {\n  return [useRouter, useRouter, useForm];\n});\n\n_c = AssignTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"AssignTask\");","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/AssignTask/index.js"],"names":["useRouter","useSWR","useForm","Link","gql","hasuraUserClient","Form","format","parseISO","from","Date","toISOString","getProjectsIds","insertmultiple","assignu","AssignTask","initialData","dataU","dataz","dataf","tasks","hasura","query","router","idP","handleSubmit","register","control","errors","isSubmitting","formState","defaultValues","console","log","User","assign","id","confirm","request","project_id","user_id","insert_user_project_one","push","onSubmit","Description","name","Project_id","insert_Task_one","window","location","reload","minHeight"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,GAAT,EAAcC,gBAAd,QAAsC,8BAAtC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AAEA,IAAMC,IAAI,GAAG,IAAIC,IAAJ,GAAWC,WAAX,EAAb;AAEA,IAAMC,cAAc,GAAGR,GAAH,iJAApB;AAmBA,IAAMS,cAAc,GAAGT,GAAH,saAApB;AAyEA,IAAMU,OAAO,GAAGV,GAAH,uRAAb;;AAiCA,eAAe,SAASW,UAAT,OAMZ;AAAA;;AAAA,MALDC,WAKC,QALDA,WAKC;AAAA,MAJDC,KAIC,QAJDA,KAIC;AAAA,MAHDC,KAGC,QAHDA,KAGC;AAAA,MAFDC,KAEC,QAFDA,KAEC;AAAA,MADDC,KACC,QADDA,KACC;AACD,MAAMC,MAAM,GAAGhB,gBAAgB,EAA/B;;AACA,mBAAkBL,SAAS,EAA3B;AAAA,MAAQsB,KAAR,cAAQA,KAAR;;AACA,MAAMC,MAAM,GAAGvB,SAAS,EAAxB;AACA,MAAQwB,GAAR,GAAgBF,KAAhB,CAAQE,GAAR;;AACA,iBAOItB,OAAO,EAPX;AAAA,MACEuB,YADF,YACEA,YADF;AAAA,MAEEC,QAFF,YAEEA,QAFF;AAAA,MAGEC,OAHF,YAGEA,OAHF;AAAA,MAIEC,MAJF,YAIEA,MAJF;AAAA,MAKeC,YALf,YAKEC,SALF,CAKeD,YALf;AAAA,MAMsBE,aANtB,yBAMEA,aANF;;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACgB,IAAlB;;AACA,MAAMC,MAAM;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,EAAT,SAASA,EAAT;AACbJ,cAAAA,OAAO,CAACC,GAAR,CAAYG,EAAZ;;AADa,mBAGXC,OAAO,kEAHI;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAMiChB,MAAM,CAACiB,OAAP,CAAexB,OAAf,EAAwB;AAChEyB,gBAAAA,UAAU,EAAEjB,KAAK,CAACc,EAD8C;AAEhEI,gBAAAA,OAAO,EAAEJ;AAFuD,eAAxB,CANjC;;AAAA;AAAA;AAMDK,cAAAA,uBANC,yBAMDA,uBANC;AAWTlB,cAAAA,MAAM,CAACmB,IAAP;AAXS;AAAA;;AAAA;AAAA;AAAA;AAaTV,cAAAA,OAAO,CAACC,GAAR;;AAbS;AAAA;AAAA;;AAAA;AAAA,+CAeC,IAfD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAANE,MAAM;AAAA;AAAA;AAAA,KAAZ;;AAiBA,MAAMQ,QAAQ;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,WAAT,SAASA,WAAT,EAAsBC,IAAtB,SAAsBA,IAAtB,EAA4BL,OAA5B,SAA4BA,OAA5B;AACfR,cAAAA,OAAO,CAACC,GAAR,CAAYxB,IAAZ;AADe;AAAA;AAAA,qBAGqBY,MAAM,CAACiB,OAAP,CAAezB,cAAf,EAA+B;AAC/D+B,gBAAAA,WAAW,EAAXA,WAD+D;AAE/DnC,gBAAAA,IAAI,EAAJA,IAF+D;AAG/DoC,gBAAAA,IAAI,EAAJA,IAH+D;AAI/DC,gBAAAA,UAAU,EAAExB,KAAK,CAACc;AAJ6C,eAA/B,CAHrB;;AAAA;AAAA;AAGLW,cAAAA,eAHK,0BAGLA,eAHK;AAUbC,cAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAVa;AAAA;;AAAA;AAAA;AAAA;AAYblB,cAAAA,OAAO,CAACC,GAAR;;AAZa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARU,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAeA,SACE;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAE;AAAEQ,MAAAA,SAAS,EAAE;AAAb,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAGS,GAHT,CADF;AAOD;;GA3DuBpC,U;UAQJf,S,EACHA,S,EASXE,O;;;KAlBkBa,U","sourcesContent":["import { useRouter } from \"next/router\";\r\nimport useSWR from \"swr\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Link from \"next/link\";\r\nimport { gql, hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { format, parseISO } from \"date-fns\";\r\n\r\nconst from = new Date().toISOString();\r\n\r\nconst getProjectsIds = gql`\r\n  {\r\n    Project {\r\n      id\r\n      Title\r\n      Description\r\n    }\r\n  }\r\n`;\r\nconst GetUsers = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n      Name\r\n      Domain\r\n      Avatar\r\n    }\r\n  }\r\n`;\r\nconst insertmultiple = gql`\r\n  mutation MyMutation(\r\n    $Description: String!\r\n    $Project_id: Int!\r\n    $name: String!\r\n    $from: timestamptz!\r\n  ) {\r\n    insert_Task(\r\n      objects: {\r\n        Date: $from\r\n        Description: $Description\r\n        completed: false\r\n        Project_id: $Project_id\r\n        name: $name\r\n      }\r\n    ) {\r\n      affected_rows\r\n    }\r\n  }\r\n`;\r\nconst GetUsersbyproject = gql`\r\n  query MyQuery($id: Int!) {\r\n    User(\r\n      where: {\r\n        _not: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\r\n      }\r\n    ) {\r\n      Name\r\n      Avatar\r\n      Last_Name\r\n      email\r\n    }\r\n  }\r\n`;\r\nconst getTasks = gql`\r\n  query MyQuery($id: Int!) {\r\n    Task(where: { Project_id: { _eq: $id } }) {\r\n      id\r\n      Description\r\n      Date\r\n      completed\r\n      name\r\n      User {\r\n        Avatar\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GetUsersWorkingOnthisProject = gql`\r\n  query MyQuery($id: Int!) {\r\n    User(\r\n      where: { project_assignments: { Task: { Project_id: { _eq: $id } } } }\r\n    ) {\r\n      id\r\n      Name\r\n      Domain\r\n      Avatar\r\n    }\r\n  }\r\n`;\r\nconst GetProjectByID = gql`\r\n  query GetProjectByID($id: Int!) {\r\n    Project_by_pk(id: $id) {\r\n      id\r\n      Title\r\n      Description\r\n      company_name\r\n      income\r\n    }\r\n  }\r\n`;\r\nconst assignu = gql`\r\n  mutation MyMutation($project_id: Int!, $user_id: Int!) {\r\n    insert_user_project_one(\r\n      object: { project_id: $project_id, user_id: $user_id }\r\n    ) {\r\n      project_id\r\n      user_id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getStaticProps = async ({ params }) => {\r\n  const hasura = hasuraUserClient();\r\n  const { id } = params;\r\n\r\n  const initialData = await hasura.request(GetProjectByID, { id });\r\n  const dataU = await hasura.request(GetUsers);\r\n  const dataz = await hasura.request(GetUsersbyproject, { id });\r\n  const dataf = await hasura.request(GetUsersWorkingOnthisProject, { id });\r\n  const tasks = await hasura.request(getTasks, { id });\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n      dataU,\r\n      dataz,\r\n      dataf,\r\n      tasks,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\n\r\nexport default function AssignTask({\r\n  initialData,\r\n  dataU,\r\n  dataz,\r\n  dataf,\r\n  tasks,\r\n}) {\r\n  const hasura = hasuraUserClient();\r\n  const { query } = useRouter();\r\n  const router = useRouter();\r\n  const { idP } = query;\r\n  const {\r\n    handleSubmit,\r\n    register,\r\n    control,\r\n    errors,\r\n    formState: { isSubmitting },\r\n    defaultValues: { ...defaultValues },\r\n  } = useForm();\r\n  console.log(dataz.User);\r\n  const assign = async ({ id }) => {\r\n    console.log(id);\r\n    if (\r\n      confirm(`are you sure you want to assign the project to this employee? `)\r\n    ) {\r\n      try {\r\n        const { insert_user_project_one } = await hasura.request(assignu, {\r\n          project_id: query.id,\r\n          user_id: id,\r\n        });\r\n\r\n        router.push(`/Project/List`);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else return null;\r\n  };\r\n  const onSubmit = async ({ Description, name, user_id }) => {\r\n    console.log(from);\r\n    try {\r\n      const { insert_Task_one } = await hasura.request(insertmultiple, {\r\n        Description,\r\n        from,\r\n        name,\r\n        Project_id: query.id,\r\n      });\r\n\r\n      window.location.reload();\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        test\r\n      </div>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}