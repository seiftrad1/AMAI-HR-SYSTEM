{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\msdtt\\\\OneDrive\\\\Documents\\\\amai_hr_next_js_hasura\\\\amai-hr\\\\pages\\\\UpdateTodo\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport useSWR, { mutate } from \"swr\";\nimport formatRelative from \"date-fns/formatRelative\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\nimport Link from \"next/link\";\nimport Layout from \"../Components/Layout\";\nimport gql from \"graphql-tag\";\nimport { useRouter } from \"next/router\";\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\nconst Todos = gql`\n  query MyQuery {\n    User {\n      id\n    }\n  }\n`;\nconst GetCandidats = gql`\n  query MyQuery($id: Int!) {\n    Todo(where: { user_id: { _eq: $id } }) {\n      id\n      Name\n      user_id\n      Description\n      Completed\n    }\n  }\n`;\nconst UpdateCompleted = gql`\n  mutation MyMutation($id: Int!) {\n    update_Todo_by_pk(pk_columns: { id: $id }, _set: { Completed: true }) {\n      Completed\n    }\n  }\n`;\nexport const getStaticPaths = async () => {\n  const hasura = hasuraUserClient();\n  const {\n    User\n  } = await hasura.request(Todos);\n  return {\n    paths: User.map(({\n      id\n    }) => ({\n      params: {\n        id: id.toString()\n      }\n    })),\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const hasura = hasuraUserClient();\n  const {\n    id\n  } = params;\n  console.log(params);\n  const initialData = await hasura.request(GetCandidats, {\n    id\n  });\n  return {\n    props: {\n      initialData\n    },\n    revalidate: 1\n  };\n};\nexport default function TodoList({\n  initialData\n}) {\n  const hasura = hasuraUserClient();\n  const {\n    query\n  } = useRouter();\n  const {\n    id\n  } = query;\n  const {\n    data\n  } = useSWR([GetCandidats, id], (query, id) => hasura.request(query), {\n    initialData,\n    revalidateOnMount: true\n  });\n\n  const Complete = async ({\n    id\n  }) => {\n    console.log(id);\n\n    try {\n      const {\n        update_Todo_by_pk\n      } = await hasura.request(UpdateCompleted, {\n        id\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const deleteTodo = async ({\n    id\n  }) => {\n    const query = gql`\n      mutation delete_Todo($id: Int!) {\n        delete_Todo(where: { id: { _eq: $id } }) {\n          affected_rows\n        }\n      }\n    `;\n\n    try {\n      await hasura.request(query, {\n        id\n      });\n      mutate();\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"page-content-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, \" \", __jsx(\"div\", {\n    className: \"page-content\",\n    style: {\n      minHeight: 1500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"col-md-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"card card-white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    className: \"page-header navbar navbar-fixed-top \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, __jsx(\"ul\", {\n    className: \"nav nav-pills todo-nav\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 19\n    }\n  }, __jsx(\"li\", {\n    role: \"presentation\",\n    className: \"nav-item all-task active\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    className: \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 23\n    }\n  }, \"All\")), __jsx(\"li\", {\n    role: \"presentation\",\n    className: \"nav-item active-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    className: \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 23\n    }\n  }, \"Active\")), __jsx(\"li\", {\n    role: \"presentation\",\n    className: \"nav-item completed-task\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    className: \"nav-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 23\n    }\n  }, \"Completed\"))), \" \", data.Todo.map(({\n    id,\n    Description,\n    Name,\n    Completed\n  }) => {\n    return __jsx(\"div\", {\n      key: id,\n      className: \"todo-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 23\n      }\n    }, !Completed ? __jsx(\"div\", {\n      className: \"todo-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 27\n      }\n    }, __jsx(\"div\", {\n      className: \"checker\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 29\n      }\n    }, __jsx(\"span\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 31\n      }\n    }, __jsx(\"input\", {\n      name: \"Completed\",\n      type: \"checkbox\",\n      onChange: () => Complete({\n        id\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 33\n      }\n    }))), __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 29\n      }\n    }, Name, \": \", Description), __jsx(\"a\", {\n      href: \"javascript:void(0);\",\n      className: \"float-right remove-todo-item\",\n      onClick: () => deleteTodo({\n        id\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 29\n      }\n    }, __jsx(\"i\", {\n      className: \"icon-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 31\n      }\n    }))) : __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 27\n      }\n    }));\n  }), \" \")))))));\n}","map":{"version":3,"sources":["C:/Users/msdtt/OneDrive/Documents/amai_hr_next_js_hasura/amai-hr/pages/UpdateTodo/[id].js"],"names":["useSWR","mutate","formatRelative","differenceInMinutes","Link","Layout","gql","useRouter","hasuraUserClient","useAuthState","useAuthDispatch","Todos","GetCandidats","UpdateCompleted","getStaticPaths","hasura","User","request","paths","map","id","params","toString","fallback","getStaticProps","console","log","initialData","props","revalidate","TodoList","query","data","revalidateOnMount","Complete","update_Todo_by_pk","err","deleteTodo","error","minHeight","Todo","Description","Name","Completed"],"mappings":"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","sourcesContent":["import useSWR, { mutate } from \"swr\";\r\nimport formatRelative from \"date-fns/formatRelative\";\r\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\r\nimport Link from \"next/link\";\r\nimport Layout from \"../Components/Layout\";\r\nimport gql from \"graphql-tag\";\r\nimport { useRouter } from \"next/router\";\r\nimport { hasuraUserClient } from \"../../lib/hasura-user-client\";\r\nimport { useAuthState, useAuthDispatch } from \"../../context/auth\";\r\nconst Todos = gql`\r\n  query MyQuery {\r\n    User {\r\n      id\r\n    }\r\n  }\r\n`;\r\nconst GetCandidats = gql`\r\n  query MyQuery($id: Int!) {\r\n    Todo(where: { user_id: { _eq: $id } }) {\r\n      id\r\n      Name\r\n      user_id\r\n      Description\r\n      Completed\r\n    }\r\n  }\r\n`;\r\nconst UpdateCompleted = gql`\r\n  mutation MyMutation($id: Int!) {\r\n    update_Todo_by_pk(pk_columns: { id: $id }, _set: { Completed: true }) {\r\n      Completed\r\n    }\r\n  }\r\n`;\r\nexport const getStaticPaths = async () => {\r\n  const hasura = hasuraUserClient();\r\n\r\n  const { User } = await hasura.request(Todos);\r\n\r\n  return {\r\n    paths: User.map(({ id }) => ({\r\n      params: {\r\n        id: id.toString(),\r\n      },\r\n    })),\r\n    fallback: false,\r\n  };\r\n};\r\nexport const getStaticProps = async ({ params }) => {\r\n  const hasura = hasuraUserClient();\r\n  const { id } = params;\r\n\r\n  console.log(params);\r\n\r\n  const initialData = await hasura.request(GetCandidats, { id });\r\n\r\n  return {\r\n    props: {\r\n      initialData,\r\n    },\r\n    revalidate: 1,\r\n  };\r\n};\r\n\r\nexport default function TodoList({ initialData }) {\r\n  const hasura = hasuraUserClient();\r\n  const { query } = useRouter();\r\n  const { id } = query;\r\n  const { data } = useSWR(\r\n    [GetCandidats, id],\r\n\r\n    (query, id) => hasura.request(query),\r\n    {\r\n      initialData,\r\n      revalidateOnMount: true,\r\n    }\r\n  );\r\n  const Complete = async ({ id }) => {\r\n    console.log(id);\r\n    try {\r\n      const { update_Todo_by_pk } = await hasura.request(UpdateCompleted, {\r\n        id,\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const deleteTodo = async ({ id }) => {\r\n    const query = gql`\r\n      mutation delete_Todo($id: Int!) {\r\n        delete_Todo(where: { id: { _eq: $id } }) {\r\n          affected_rows\r\n        }\r\n      }\r\n    `;\r\n\r\n    try {\r\n      await hasura.request(query, { id });\r\n      mutate();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"page-content-wrapper\">\r\n      {\" \"}\r\n      <div className=\"page-content\" style={{ minHeight: 1500 }}>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <div className=\"card card-white\">\r\n                <div className=\"page-header navbar navbar-fixed-top \">\r\n                  <ul className=\"nav nav-pills todo-nav\">\r\n                    <li\r\n                      role=\"presentation\"\r\n                      className=\"nav-item all-task active\"\r\n                    >\r\n                      <a href=\"#\" className=\"nav-link\">\r\n                        All\r\n                      </a>\r\n                    </li>\r\n                    <li role=\"presentation\" className=\"nav-item active-task\">\r\n                      <a href=\"#\" className=\"nav-link\">\r\n                        Active\r\n                      </a>\r\n                    </li>\r\n                    <li role=\"presentation\" className=\"nav-item completed-task\">\r\n                      <a href=\"#\" className=\"nav-link\">\r\n                        Completed\r\n                      </a>\r\n                    </li>\r\n                  </ul>{\" \"}\r\n                  {data.Todo.map(({ id, Description, Name, Completed }) => {\r\n                    return (\r\n                      <div key={id} className=\"todo-list\">\r\n                        {!Completed ? (\r\n                          <div className=\"todo-item\">\r\n                            <div className=\"checker\">\r\n                              <span className=\"\">\r\n                                <input\r\n                                  name=\"Completed\"\r\n                                  type=\"checkbox\"\r\n                                  onChange={() => Complete({ id })}\r\n                                />\r\n                              </span>\r\n                            </div>\r\n                            <span>\r\n                              {Name}: {Description}\r\n                            </span>\r\n\r\n                            <a\r\n                              href=\"javascript:void(0);\"\r\n                              className=\"float-right remove-todo-item\"\r\n                              onClick={() => deleteTodo({ id })}\r\n                            >\r\n                              <i className=\"icon-close\"></i>\r\n                            </a>\r\n                          </div>\r\n                        ) : (\r\n                          <div></div>\r\n                        )}\r\n                      </div>\r\n                    );\r\n                  })}{\" \"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}